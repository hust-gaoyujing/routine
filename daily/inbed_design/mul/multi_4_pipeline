module  multiplier_4(
	input 				clk,
	input				rst_n,
	input				enable,
	input 	[3:0]		in_a,
	input 	[3:0]		in_b,
	
	output 	[7:0]		out_data,
);
	
	reg		[3:0]		tmp_0;			
	reg		[4:0]		tmp_1;			
	reg		[5:0]		tmp_2;			
	reg		[6:0]		tmp_3;		

	reg 	[5:0]		add01;
	reg 	[7:0]		add23;
	reg		[7:0]		out_data_r;
	
	assign out_data = out_data_r;
	
	always @(posedge clk or negedge rst_n) 
		if(!rst_n) begin 
			tmp_0 <= 4'b0;
			tmp_1 <= 5'b0;
			tmp_2 <= 6'b0;
			tmp_3 <= 7'b0;
		end 
		else if(enable) begin 
			tmp_0 <= in_b[0] ? in_a : 4'b0;
			tmp_1 <= in_b[1] ? (in_a << 1) : 5'b0;
			tmp_2 <= in_b[2] ? (in_a << 2) : 6'b0;
			tmp_3 <= in_b[3] ? (in_a << 3) : 7'b0;
		end 
		else begin 
			tmp_0 <= 4'b0;
			tmp_1 <= 5'b0;
			tmp_2 <= 6'b0;
			tmp_3 <= 7'b0;
		end 
	
	always @(posedge clk or negedge rst_n)
		if(!rst_n) begin 
			add01 <= 6'b0;
			add23 <= 8'b0;
			out_data_r <= 8'b0;
		end 
		else if(enable) begin 
			add01 <= tmp_0 + tmp_1;
			add23 <= tmp_2 + tmp_3;
			out_data_r <= add01 + add23;			
		end 
		else begin 
			add01 <= 6'b0;
			add23 <= 8'b0;
			out_data_r <= 8'b0;			
		end 
		
	
	

endmodule 