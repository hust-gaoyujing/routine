
demo_timer.elf:     file format elf32-littleriscv


Disassembly of section .init:

80000000 <vector_base>:

    .globl vector_base
    .type vector_base, @object
vector_base:
#if defined(DOWNLOAD_MODE) && (DOWNLOAD_MODE != DOWNLOAD_MODE_FLASH)
    j _start                                                /* 0: Reserved, Jump to _start when reset for ILM/FlashXIP mode.*/
80000000:	6f 00 c0 0c ee 02 00 80 ee 02 00 80 46 0f 00 80     o...........F...
80000010:	ee 02 00 80 ee 02 00 80 ee 02 00 80 b2 0e 00 80     ................
80000020:	ee 02 00 80 ee 02 00 80 ee 02 00 80 ee 02 00 80     ................
80000030:	ee 02 00 80 ee 02 00 80 ee 02 00 80 ee 02 00 80     ................
80000040:	ee 02 00 80 ee 02 00 80 ee 02 00 80 00 00 00 00     ................
	...

800000cc <_start>:
 * Reset Handler called on controller reset
 */
_start:
    /* ===== Startup Stage 1 ===== */
    /* Disable Global Interrupt */
    csrc CSR_MSTATUS, MSTATUS_MIE
800000cc:	30047073          	csrci	mstatus,8

    /* Initialize GP and Stack Pointer SP */
    .option push
    .option norelax
    la gp, __global_pointer$
800000d0:	10000197          	auipc	gp,0x10000
800000d4:	79018193          	addi	gp,gp,1936 # 90000860 <__global_pointer$>
    .option pop
    la sp, _sp
800000d8:	10010117          	auipc	sp,0x10010
800000dc:	f2810113          	addi	sp,sp,-216 # 90010000 <_sp>
    /*
     * Set the the NMI base mnvec to share
     * with mtvec by setting CSR_MMISC_CTL
     * bit 9 NMI_CAUSE_FFF to 1
     */
    li t0, MMISC_CTL_NMI_CAUSE_FFF
800000e0:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
800000e4:	7d02a073          	csrs	0x7d0,t0

    /*
     * Intialize ECLIC vector interrupt
     * base address mtvt to vector_base
     */
    la t0, vector_base
800000e8:	00000297          	auipc	t0,0x0
800000ec:	f1828293          	addi	t0,t0,-232 # 80000000 <vector_base>
    csrw CSR_MTVT, t0
800000f0:	30729073          	csrw	0x307,t0
     * Set ECLIC non-vector entry to be controlled
     * by mtvt2 CSR register.
     * Intialize ECLIC non-vector interrupt
     * base address mtvt2 to irq_entry.
     */
    la t0, irq_entry
800000f4:	00000297          	auipc	t0,0x0
800000f8:	18828293          	addi	t0,t0,392 # 8000027c <irq_entry>
    csrw CSR_MTVT2, t0
800000fc:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
80000100:	7ec0e073          	csrsi	0x7ec,1
    /*
     * Set Exception Entry MTVEC to exc_entry
     * Due to settings above, Exception and NMI
     * will share common entry.
     */
    la t0, exc_entry
80000104:	00000297          	auipc	t0,0x0
80000108:	0fc28293          	addi	t0,t0,252 # 80000200 <exc_entry>
    csrw CSR_MTVEC, t0
8000010c:	30529073          	csrw	mtvec,t0

    /* Set the interrupt processing mode to ECLIC mode */
    li t0, 0x3f
80000110:	03f00293          	li	t0,63
    csrc CSR_MTVEC, t0
80000114:	3052b073          	csrc	mtvec,t0
    csrs CSR_MTVEC, 0x3
80000118:	3051e073          	csrsi	mtvec,3

    /* ===== Startup Stage 2 ===== */

#ifdef __riscv_flen
    /* Enable FPU */
    li t0, MSTATUS_FS
8000011c:	6299                	lui	t0,0x6
    csrs mstatus, t0
8000011e:	3002a073          	csrs	mstatus,t0
    csrw fcsr, x0
80000122:	00301073          	fssr	zero
#endif

    /* Enable mcycle and minstret counter */
    csrci CSR_MCOUNTINHIBIT, 0x5
80000126:	3202f073          	csrci	mucounteren,5
    /* ===== Startup Stage 3 ===== */
    /*
     * Load code section from FLASH to ILM
     * when code LMA is different with VMA
     */
    la a0, _ilm_lma
8000012a:	00000517          	auipc	a0,0x0
8000012e:	09a50513          	addi	a0,a0,154 # 800001c4 <_ilm>
    la a1, _ilm
80000132:	00000597          	auipc	a1,0x0
80000136:	09258593          	addi	a1,a1,146 # 800001c4 <_ilm>
    /* If the ILM phy-address same as the logic-address, then quit */
    beq a0, a1, 2f
8000013a:	02b50063          	beq	a0,a1,8000015a <_start+0x8e>
    la a2, _eilm
8000013e:	00002617          	auipc	a2,0x2
80000142:	62660613          	addi	a2,a2,1574 # 80002764 <__fsymtab_end>
    bgeu a1, a2, 2f
80000146:	00c5fa63          	bgeu	a1,a2,8000015a <_start+0x8e>

1:
    /* Load code section if necessary */
    lw t0, (a0)
8000014a:	00052283          	lw	t0,0(a0)
    sw t0, (a1)
8000014e:	0055a023          	sw	t0,0(a1)
    addi a0, a0, 4
80000152:	0511                	addi	a0,a0,4
    addi a1, a1, 4
80000154:	0591                	addi	a1,a1,4
    bltu a1, a2, 1b
80000156:	fec5eae3          	bltu	a1,a2,8000014a <_start+0x7e>
2:
    /* Load data section */
    la a0, _data_lma
8000015a:	00002517          	auipc	a0,0x2
8000015e:	60a50513          	addi	a0,a0,1546 # 80002764 <__fsymtab_end>
    la a1, _data
80000162:	10000597          	auipc	a1,0x10000
80000166:	e9e58593          	addi	a1,a1,-354 # 90000000 <_data>
    la a2, _edata
8000016a:	10000617          	auipc	a2,0x10000
8000016e:	f1e60613          	addi	a2,a2,-226 # 90000088 <__bss_start>
    bgeu a1, a2, 2f
80000172:	00c5fa63          	bgeu	a1,a2,80000186 <_start+0xba>
1:
    lw t0, (a0)
80000176:	00052283          	lw	t0,0(a0)
    sw t0, (a1)
8000017a:	0055a023          	sw	t0,0(a1)
    addi a0, a0, 4
8000017e:	0511                	addi	a0,a0,4
    addi a1, a1, 4
80000180:	0591                	addi	a1,a1,4
    bltu a1, a2, 1b
80000182:	fec5eae3          	bltu	a1,a2,80000176 <_start+0xaa>
2:
    /* Clear bss section */
    la a0, __bss_start
80000186:	10000517          	auipc	a0,0x10000
8000018a:	f0250513          	addi	a0,a0,-254 # 90000088 <__bss_start>
    la a1, _end
8000018e:	90018593          	addi	a1,gp,-1792 # 90000160 <_end>
    bgeu a0, a1, 2f
80000192:	00b57763          	bgeu	a0,a1,800001a0 <_start+0xd4>
1:
    sw zero, (a0)
80000196:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
8000019a:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
8000019c:	feb56de3          	bltu	a0,a1,80000196 <_start+0xca>

    /*
     * Call vendor defined SystemInit to
     * initialize the micro-controller system
     */
    call SystemInit
800001a0:	2b4d                	jal	80000752 <SystemInit>

    /* Call global constructors */
    la a0, __libc_fini_array
800001a2:	00001517          	auipc	a0,0x1
800001a6:	fe050513          	addi	a0,a0,-32 # 80001182 <__libc_fini_array>
    call atexit
800001aa:	7cf000ef          	jal	ra,80001178 <atexit>
    /* Call C/C++ constructor start up code */
    call __libc_init_array
800001ae:	00c010ef          	jal	ra,800011ba <__libc_init_array>

    /* do pre-init steps before main */
    call _premain_init
800001b2:	3ed000ef          	jal	ra,80000d9e <_premain_init>
    /* ===== Call Main Function  ===== */
    /* argc = argv = 0 */
    li a0, 0
800001b6:	4501                	li	a0,0
    li a1, 0
800001b8:	4581                	li	a1,0

#ifdef RTOS_RTTHREAD
    // Call entry function when using RT-Thread
    call entry
#else
    call main
800001ba:	673000ef          	jal	ra,8000102c <main>
#endif
    /* do post-main steps after main */
    call _postmain_fini
800001be:	423000ef          	jal	ra,80000de0 <_postmain_fini>

1:
    j 1b
800001c2:	a001                	j	800001c2 <_start+0xf6>

Disassembly of section .text:

80000200 <exc_entry>:
.align 6
.global exc_entry
.weak exc_entry
exc_entry:
    /* Save the caller saving registers (context) */
    SAVE_CONTEXT
80000200:	715d                	addi	sp,sp,-80
80000202:	c006                	sw	ra,0(sp)
80000204:	c212                	sw	tp,4(sp)
80000206:	c416                	sw	t0,8(sp)
80000208:	c61a                	sw	t1,12(sp)
8000020a:	c81e                	sw	t2,16(sp)
8000020c:	ca2a                	sw	a0,20(sp)
8000020e:	cc2e                	sw	a1,24(sp)
80000210:	ce32                	sw	a2,28(sp)
80000212:	d036                	sw	a3,32(sp)
80000214:	d23a                	sw	a4,36(sp)
80000216:	d43e                	sw	a5,40(sp)
80000218:	dc42                	sw	a6,56(sp)
8000021a:	de46                	sw	a7,60(sp)
8000021c:	c0f2                	sw	t3,64(sp)
8000021e:	c2f6                	sw	t4,68(sp)
80000220:	c4fa                	sw	t5,72(sp)
80000222:	c6fe                	sw	t6,76(sp)
    /* Save the necessary CSR registers */
    SAVE_CSR_CONTEXT
80000224:	7ee5d073          	csrwi	0x7ee,11
80000228:	7ef65073          	csrwi	0x7ef,12
8000022c:	7eb6d073          	csrwi	0x7eb,13
    /*
     * Set the exception handler function arguments
     * argument 1: mcause value
     * argument 2: current stack point(SP) value
     */
    csrr a0, mcause
80000230:	34202573          	csrr	a0,mcause
    mv a1, sp
80000234:	858a                	mv	a1,sp
    /*
     * TODO: Call the exception handler function
     * By default, the function template is provided in
     * system_Device.c, you can adjust it as you want
     */
    call core_exception_handler
80000236:	23d5                	jal	8000081a <core_exception_handler>

    /* Restore the necessary CSR registers */
    RESTORE_CSR_CONTEXT
80000238:	52d2                	lw	t0,52(sp)
8000023a:	7c429073          	csrw	0x7c4,t0
8000023e:	52c2                	lw	t0,48(sp)
80000240:	34129073          	csrw	mepc,t0
80000244:	52b2                	lw	t0,44(sp)
80000246:	34229073          	csrw	mcause,t0
    /* Restore the caller saving registers (context) */
    RESTORE_CONTEXT
8000024a:	4082                	lw	ra,0(sp)
8000024c:	4212                	lw	tp,4(sp)
8000024e:	42a2                	lw	t0,8(sp)
80000250:	4332                	lw	t1,12(sp)
80000252:	43c2                	lw	t2,16(sp)
80000254:	4552                	lw	a0,20(sp)
80000256:	45e2                	lw	a1,24(sp)
80000258:	4672                	lw	a2,28(sp)
8000025a:	5682                	lw	a3,32(sp)
8000025c:	5712                	lw	a4,36(sp)
8000025e:	57a2                	lw	a5,40(sp)
80000260:	5862                	lw	a6,56(sp)
80000262:	58f2                	lw	a7,60(sp)
80000264:	4e06                	lw	t3,64(sp)
80000266:	4e96                	lw	t4,68(sp)
80000268:	4f26                	lw	t5,72(sp)
8000026a:	4fb6                	lw	t6,76(sp)
8000026c:	6161                	addi	sp,sp,80

    /* Return to regular code */
    mret
8000026e:	30200073          	mret
	...

8000027c <irq_entry>:
.global irq_entry
.weak irq_entry
/* This label will be set to MTVT2 register */
irq_entry:
    /* Save the caller saving registers (context) */
    SAVE_CONTEXT
8000027c:	715d                	addi	sp,sp,-80
8000027e:	c006                	sw	ra,0(sp)
80000280:	c212                	sw	tp,4(sp)
80000282:	c416                	sw	t0,8(sp)
80000284:	c61a                	sw	t1,12(sp)
80000286:	c81e                	sw	t2,16(sp)
80000288:	ca2a                	sw	a0,20(sp)
8000028a:	cc2e                	sw	a1,24(sp)
8000028c:	ce32                	sw	a2,28(sp)
8000028e:	d036                	sw	a3,32(sp)
80000290:	d23a                	sw	a4,36(sp)
80000292:	d43e                	sw	a5,40(sp)
80000294:	dc42                	sw	a6,56(sp)
80000296:	de46                	sw	a7,60(sp)
80000298:	c0f2                	sw	t3,64(sp)
8000029a:	c2f6                	sw	t4,68(sp)
8000029c:	c4fa                	sw	t5,72(sp)
8000029e:	c6fe                	sw	t6,76(sp)
    /* Save the necessary CSR registers */
    SAVE_CSR_CONTEXT
800002a0:	7ee5d073          	csrwi	0x7ee,11
800002a4:	7ef65073          	csrwi	0x7ef,12
800002a8:	7eb6d073          	csrwi	0x7eb,13
    /* This special CSR read/write operation, which is actually
     * claim the CLIC to find its pending highest ID, if the ID
     * is not 0, then automatically enable the mstatus.MIE, and
     * jump to its vector-entry-label, and update the link register
     */
    csrrw ra, CSR_JALMNXTI, ra
800002ac:	7ed090f3          	csrrw	ra,0x7ed,ra

    /* Critical section with interrupts disabled */
    DISABLE_MIE
800002b0:	30047073          	csrci	mstatus,8

    /* Restore the necessary CSR registers */
    RESTORE_CSR_CONTEXT
800002b4:	52d2                	lw	t0,52(sp)
800002b6:	7c429073          	csrw	0x7c4,t0
800002ba:	52c2                	lw	t0,48(sp)
800002bc:	34129073          	csrw	mepc,t0
800002c0:	52b2                	lw	t0,44(sp)
800002c2:	34229073          	csrw	mcause,t0
    /* Restore the caller saving registers (context) */
    RESTORE_CONTEXT
800002c6:	4082                	lw	ra,0(sp)
800002c8:	4212                	lw	tp,4(sp)
800002ca:	42a2                	lw	t0,8(sp)
800002cc:	4332                	lw	t1,12(sp)
800002ce:	43c2                	lw	t2,16(sp)
800002d0:	4552                	lw	a0,20(sp)
800002d2:	45e2                	lw	a1,24(sp)
800002d4:	4672                	lw	a2,28(sp)
800002d6:	5682                	lw	a3,32(sp)
800002d8:	5712                	lw	a4,36(sp)
800002da:	57a2                	lw	a5,40(sp)
800002dc:	5862                	lw	a6,56(sp)
800002de:	58f2                	lw	a7,60(sp)
800002e0:	4e06                	lw	t3,64(sp)
800002e2:	4e96                	lw	t4,68(sp)
800002e4:	4f26                	lw	t5,72(sp)
800002e6:	4fb6                	lw	t6,76(sp)
800002e8:	6161                	addi	sp,sp,80

    /* Return to regular code */
    mret
800002ea:	30200073          	mret

800002ee <default_intexc_handler>:
.global default_intexc_handler
.weak default_intexc_handler
Undef_Handler:
default_intexc_handler:
1:
    j 1b
800002ee:	a001                	j	800002ee <default_intexc_handler>
	...

800002f2 <gpio_iof_config>:
#include "hbird.h"
#include "hbird_gpio.h"

int32_t gpio_iof_config(GPIO_TypeDef *gpio, uint32_t mask, IOF_FUNC func)
{
800002f2:	1101                	addi	sp,sp,-32
800002f4:	ce22                	sw	s0,28(sp)
800002f6:	1000                	addi	s0,sp,32
800002f8:	fea42623          	sw	a0,-20(s0)
800002fc:	feb42423          	sw	a1,-24(s0)
80000300:	fec42223          	sw	a2,-28(s0)
    if (__RARELY(gpio == NULL)) {
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	0017b793          	seqz	a5,a5
8000030c:	0ff7f793          	andi	a5,a5,255
80000310:	c399                	beqz	a5,80000316 <gpio_iof_config+0x24>
        return -1;
80000312:	57fd                	li	a5,-1
80000314:	a851                	j	800003a8 <gpio_iof_config+0xb6>
    }
    switch (func) {
80000316:	fe442703          	lw	a4,-28(s0)
8000031a:	4789                	li	a5,2
8000031c:	06f70163          	beq	a4,a5,8000037e <gpio_iof_config+0x8c>
80000320:	fe442703          	lw	a4,-28(s0)
80000324:	4789                	li	a5,2
80000326:	06e7ef63          	bltu	a5,a4,800003a4 <gpio_iof_config+0xb2>
8000032a:	fe442783          	lw	a5,-28(s0)
8000032e:	c799                	beqz	a5,8000033c <gpio_iof_config+0x4a>
80000330:	fe442703          	lw	a4,-28(s0)
80000334:	4785                	li	a5,1
80000336:	00f70f63          	beq	a4,a5,80000354 <gpio_iof_config+0x62>
        case IOF_SEL_1:
            gpio->IOF_SEL |= mask;
            gpio->IOF_EN |= mask;
            break;
        default:
            break;
8000033a:	a0ad                	j	800003a4 <gpio_iof_config+0xb2>
            gpio->IOF_EN &= ~mask;
8000033c:	fec42783          	lw	a5,-20(s0)
80000340:	5f98                	lw	a4,56(a5)
80000342:	fe842783          	lw	a5,-24(s0)
80000346:	fff7c793          	not	a5,a5
8000034a:	8f7d                	and	a4,a4,a5
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	df98                	sw	a4,56(a5)
            break;
80000352:	a891                	j	800003a6 <gpio_iof_config+0xb4>
            gpio->IOF_SEL &= ~mask;
80000354:	fec42783          	lw	a5,-20(s0)
80000358:	5fd8                	lw	a4,60(a5)
8000035a:	fe842783          	lw	a5,-24(s0)
8000035e:	fff7c793          	not	a5,a5
80000362:	8f7d                	and	a4,a4,a5
80000364:	fec42783          	lw	a5,-20(s0)
80000368:	dfd8                	sw	a4,60(a5)
            gpio->IOF_EN |= mask;
8000036a:	fec42783          	lw	a5,-20(s0)
8000036e:	5f98                	lw	a4,56(a5)
80000370:	fe842783          	lw	a5,-24(s0)
80000374:	8f5d                	or	a4,a4,a5
80000376:	fec42783          	lw	a5,-20(s0)
8000037a:	df98                	sw	a4,56(a5)
            break;
8000037c:	a02d                	j	800003a6 <gpio_iof_config+0xb4>
            gpio->IOF_SEL |= mask;
8000037e:	fec42783          	lw	a5,-20(s0)
80000382:	5fd8                	lw	a4,60(a5)
80000384:	fe842783          	lw	a5,-24(s0)
80000388:	8f5d                	or	a4,a4,a5
8000038a:	fec42783          	lw	a5,-20(s0)
8000038e:	dfd8                	sw	a4,60(a5)
            gpio->IOF_EN |= mask;
80000390:	fec42783          	lw	a5,-20(s0)
80000394:	5f98                	lw	a4,56(a5)
80000396:	fe842783          	lw	a5,-24(s0)
8000039a:	8f5d                	or	a4,a4,a5
8000039c:	fec42783          	lw	a5,-20(s0)
800003a0:	df98                	sw	a4,56(a5)
            break;
800003a2:	a011                	j	800003a6 <gpio_iof_config+0xb4>
            break;
800003a4:	0001                	nop
    }
    return 0;
800003a6:	4781                	li	a5,0
}
800003a8:	853e                	mv	a0,a5
800003aa:	4472                	lw	s0,28(sp)
800003ac:	6105                	addi	sp,sp,32
800003ae:	8082                	ret

800003b0 <uart_init>:
#include "hbird.h"
#include "hbird_uart.h"

int32_t uart_init(UART_TypeDef *uart, uint32_t baudrate)
{
800003b0:	1101                	addi	sp,sp,-32
800003b2:	ce22                	sw	s0,28(sp)
800003b4:	1000                	addi	s0,sp,32
800003b6:	fea42623          	sw	a0,-20(s0)
800003ba:	feb42423          	sw	a1,-24(s0)
    if (__RARELY(uart == NULL)) {
800003be:	fec42783          	lw	a5,-20(s0)
800003c2:	0017b793          	seqz	a5,a5
800003c6:	0ff7f793          	andi	a5,a5,255
800003ca:	c399                	beqz	a5,800003d0 <uart_init+0x20>
        return -1;
800003cc:	57fd                	li	a5,-1
800003ce:	a081                	j	8000040e <uart_init+0x5e>
    }
    uart->DIV = SystemCoreClock / baudrate - 1;
800003d0:	10000797          	auipc	a5,0x10000
800003d4:	c9478793          	addi	a5,a5,-876 # 90000064 <SystemCoreClock>
800003d8:	4398                	lw	a4,0(a5)
800003da:	fe842783          	lw	a5,-24(s0)
800003de:	02f757b3          	divu	a5,a4,a5
800003e2:	fff78713          	addi	a4,a5,-1
800003e6:	fec42783          	lw	a5,-20(s0)
800003ea:	cf98                	sw	a4,24(a5)
    uart->TXCTRL |= UART_TXEN;
800003ec:	fec42783          	lw	a5,-20(s0)
800003f0:	479c                	lw	a5,8(a5)
800003f2:	0017e713          	ori	a4,a5,1
800003f6:	fec42783          	lw	a5,-20(s0)
800003fa:	c798                	sw	a4,8(a5)
    uart->RXCTRL |= UART_RXEN;
800003fc:	fec42783          	lw	a5,-20(s0)
80000400:	47dc                	lw	a5,12(a5)
80000402:	0017e713          	ori	a4,a5,1
80000406:	fec42783          	lw	a5,-20(s0)
8000040a:	c7d8                	sw	a4,12(a5)
    return 0;
8000040c:	4781                	li	a5,0
}
8000040e:	853e                	mv	a0,a5
80000410:	4472                	lw	s0,28(sp)
80000412:	6105                	addi	sp,sp,32
80000414:	8082                	ret

80000416 <uart_write>:
    uart->TXCTRL &= stopval | (~UART_TXCTRL_TXCNT_MASK);
    return 0;
}

int32_t uart_write(UART_TypeDef *uart, uint8_t val)
{
80000416:	1101                	addi	sp,sp,-32
80000418:	ce22                	sw	s0,28(sp)
8000041a:	1000                	addi	s0,sp,32
8000041c:	fea42623          	sw	a0,-20(s0)
80000420:	87ae                	mv	a5,a1
80000422:	fef405a3          	sb	a5,-21(s0)
    if (__RARELY(uart == NULL)) {
80000426:	fec42783          	lw	a5,-20(s0)
8000042a:	0017b793          	seqz	a5,a5
8000042e:	0ff7f793          	andi	a5,a5,255
80000432:	c399                	beqz	a5,80000438 <uart_write+0x22>
        return -1;
80000434:	57fd                	li	a5,-1
80000436:	a829                	j	80000450 <uart_write+0x3a>
    }
#ifndef SIMULATION_XLSPIKE
    while (uart->TXFIFO & UART_TXFIFO_FULL);
80000438:	0001                	nop
8000043a:	fec42783          	lw	a5,-20(s0)
8000043e:	439c                	lw	a5,0(a5)
80000440:	fe07cde3          	bltz	a5,8000043a <uart_write+0x24>
#endif
    uart->TXFIFO = val;
80000444:	feb44703          	lbu	a4,-21(s0)
80000448:	fec42783          	lw	a5,-20(s0)
8000044c:	c398                	sw	a4,0(a5)
    return 0;
8000044e:	4781                	li	a5,0
}
80000450:	853e                	mv	a0,a5
80000452:	4472                	lw	s0,28(sp)
80000454:	6105                	addi	sp,sp,32
80000456:	8082                	ret

80000458 <uart_read>:

uint8_t uart_read(UART_TypeDef *uart)
{
80000458:	7179                	addi	sp,sp,-48
8000045a:	d622                	sw	s0,44(sp)
8000045c:	1800                	addi	s0,sp,48
8000045e:	fca42e23          	sw	a0,-36(s0)
    uint32_t reg;
    if (__RARELY(uart == NULL)) {
80000462:	fdc42783          	lw	a5,-36(s0)
80000466:	0017b793          	seqz	a5,a5
8000046a:	0ff7f793          	andi	a5,a5,255
8000046e:	c781                	beqz	a5,80000476 <uart_read+0x1e>
        return -1;
80000470:	0ff00793          	li	a5,255
80000474:	a831                	j	80000490 <uart_read+0x38>
    }
    do {
        reg = uart->RXFIFO;
80000476:	fdc42783          	lw	a5,-36(s0)
8000047a:	43dc                	lw	a5,4(a5)
8000047c:	fef42623          	sw	a5,-20(s0)
    }
    while (reg & UART_RXFIFO_EMPTY);
80000480:	fec42783          	lw	a5,-20(s0)
80000484:	fe07c9e3          	bltz	a5,80000476 <uart_read+0x1e>
    return (uint8_t)(reg & 0xFF);
80000488:	fec42783          	lw	a5,-20(s0)
8000048c:	0ff7f793          	andi	a5,a5,255
}
80000490:	853e                	mv	a0,a5
80000492:	5432                	lw	s0,44(sp)
80000494:	6145                	addi	sp,sp,48
80000496:	8082                	ret

80000498 <_close>:

#undef errno
extern int errno;

__WEAK int _close(int fd)
{
80000498:	1101                	addi	sp,sp,-32
8000049a:	ce22                	sw	s0,28(sp)
8000049c:	1000                	addi	s0,sp,32
8000049e:	fea42623          	sw	a0,-20(s0)
    errno = EBADF;
800004a2:	8fc18793          	addi	a5,gp,-1796 # 9000015c <errno>
800004a6:	4725                	li	a4,9
800004a8:	c398                	sw	a4,0(a5)
    return -1;
800004aa:	57fd                	li	a5,-1
}
800004ac:	853e                	mv	a0,a5
800004ae:	4472                	lw	s0,28(sp)
800004b0:	6105                	addi	sp,sp,32
800004b2:	8082                	ret

800004b4 <_fstat>:

#undef errno
extern int errno;

__WEAK int _fstat(int file, struct stat *st)
{
800004b4:	1101                	addi	sp,sp,-32
800004b6:	ce22                	sw	s0,28(sp)
800004b8:	1000                	addi	s0,sp,32
800004ba:	fea42623          	sw	a0,-20(s0)
800004be:	feb42423          	sw	a1,-24(s0)
    if ((STDOUT_FILENO == file) || (STDERR_FILENO == file)) {
800004c2:	fec42703          	lw	a4,-20(s0)
800004c6:	4785                	li	a5,1
800004c8:	00f70763          	beq	a4,a5,800004d6 <_fstat+0x22>
800004cc:	fec42703          	lw	a4,-20(s0)
800004d0:	4789                	li	a5,2
800004d2:	00f71863          	bne	a4,a5,800004e2 <_fstat+0x2e>
        st->st_mode = S_IFCHR;
800004d6:	fe842783          	lw	a5,-24(s0)
800004da:	6709                	lui	a4,0x2
800004dc:	c3d8                	sw	a4,4(a5)
        return 0;
800004de:	4781                	li	a5,0
800004e0:	a031                	j	800004ec <_fstat+0x38>
    } else {
        errno = EBADF;
800004e2:	8fc18793          	addi	a5,gp,-1796 # 9000015c <errno>
800004e6:	4725                	li	a4,9
800004e8:	c398                	sw	a4,0(a5)
        return -1;
800004ea:	57fd                	li	a5,-1
    }
}
800004ec:	853e                	mv	a0,a5
800004ee:	4472                	lw	s0,28(sp)
800004f0:	6105                	addi	sp,sp,32
800004f2:	8082                	ret

800004f4 <_isatty>:
/* See LICENSE of license details. */
#include "nuclei_sdk_soc.h"
#include <unistd.h>

__WEAK int _isatty(int fd)
{
800004f4:	1101                	addi	sp,sp,-32
800004f6:	ce22                	sw	s0,28(sp)
800004f8:	1000                	addi	s0,sp,32
800004fa:	fea42623          	sw	a0,-20(s0)
    return 1;
800004fe:	4785                	li	a5,1
}
80000500:	853e                	mv	a0,a5
80000502:	4472                	lw	s0,28(sp)
80000504:	6105                	addi	sp,sp,32
80000506:	8082                	ret

80000508 <_lseek>:

#undef errno
extern int errno;

__WEAK int _lseek(int file, int offset, int whence)
{
80000508:	1101                	addi	sp,sp,-32
8000050a:	ce22                	sw	s0,28(sp)
8000050c:	1000                	addi	s0,sp,32
8000050e:	fea42623          	sw	a0,-20(s0)
80000512:	feb42423          	sw	a1,-24(s0)
80000516:	fec42223          	sw	a2,-28(s0)
    return 0;
8000051a:	4781                	li	a5,0
}
8000051c:	853e                	mv	a0,a5
8000051e:	4472                	lw	s0,28(sp)
80000520:	6105                	addi	sp,sp,32
80000522:	8082                	ret

80000524 <_read>:
#include "nuclei_sdk_hal.h"

// #define UART_AUTO_ECHO

__WEAK ssize_t _read(int fd, void* ptr, size_t len)
{
80000524:	7179                	addi	sp,sp,-48
80000526:	d606                	sw	ra,44(sp)
80000528:	d422                	sw	s0,40(sp)
8000052a:	1800                	addi	s0,sp,48
8000052c:	fca42e23          	sw	a0,-36(s0)
80000530:	fcb42c23          	sw	a1,-40(s0)
80000534:	fcc42a23          	sw	a2,-44(s0)
    if (fd != STDIN_FILENO) {
80000538:	fdc42783          	lw	a5,-36(s0)
8000053c:	c399                	beqz	a5,80000542 <_read+0x1e>
        return -1;
8000053e:	57fd                	li	a5,-1
80000540:	a839                	j	8000055e <_read+0x3a>
    }

    uint8_t *readbuf = (uint8_t *)ptr;
80000542:	fd842783          	lw	a5,-40(s0)
80000546:	fef42623          	sw	a5,-20(s0)
    readbuf[0] = uart_read(SOC_DEBUG_UART);
8000054a:	10013537          	lui	a0,0x10013
8000054e:	3729                	jal	80000458 <uart_read>
80000550:	87aa                	mv	a5,a0
80000552:	873e                	mv	a4,a5
80000554:	fec42783          	lw	a5,-20(s0)
80000558:	00e78023          	sb	a4,0(a5)
#ifdef UART_AUTO_ECHO
    uart_write(SOC_DEBUG_UART, readbuf[0]);
#endif
    return 1;
8000055c:	4785                	li	a5,1
}
8000055e:	853e                	mv	a0,a5
80000560:	50b2                	lw	ra,44(sp)
80000562:	5422                	lw	s0,40(sp)
80000564:	6145                	addi	sp,sp,48
80000566:	8082                	ret

80000568 <_sbrk>:
#include <stdint.h>
#include <stddef.h>
#include <unistd.h>

__WEAK void *_sbrk(ptrdiff_t incr)
{
80000568:	1101                	addi	sp,sp,-32
8000056a:	ce22                	sw	s0,28(sp)
8000056c:	1000                	addi	s0,sp,32
8000056e:	fea42623          	sw	a0,-20(s0)
    extern char _end[];
    extern char _heap_end[];
    static char *curbrk = _end;

    if ((curbrk + incr < _end) || (curbrk + incr > _heap_end)) {
80000572:	10000797          	auipc	a5,0x10000
80000576:	aee78793          	addi	a5,a5,-1298 # 90000060 <curbrk.4107>
8000057a:	4398                	lw	a4,0(a5)
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	973e                	add	a4,a4,a5
80000582:	90018793          	addi	a5,gp,-1792 # 90000160 <_end>
80000586:	02f76063          	bltu	a4,a5,800005a6 <_sbrk+0x3e>
8000058a:	10000797          	auipc	a5,0x10000
8000058e:	ad678793          	addi	a5,a5,-1322 # 90000060 <curbrk.4107>
80000592:	4398                	lw	a4,0(a5)
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	973e                	add	a4,a4,a5
8000059a:	1000f797          	auipc	a5,0x1000f
8000059e:	26678793          	addi	a5,a5,614 # 9000f800 <_heap_end>
800005a2:	00e7f463          	bgeu	a5,a4,800005aa <_sbrk+0x42>
        return (void *)(-1);
800005a6:	57fd                	li	a5,-1
800005a8:	a805                	j	800005d8 <_sbrk+0x70>
    }

    curbrk += incr;
800005aa:	10000797          	auipc	a5,0x10000
800005ae:	ab678793          	addi	a5,a5,-1354 # 90000060 <curbrk.4107>
800005b2:	4398                	lw	a4,0(a5)
800005b4:	fec42783          	lw	a5,-20(s0)
800005b8:	973e                	add	a4,a4,a5
800005ba:	10000797          	auipc	a5,0x10000
800005be:	aa678793          	addi	a5,a5,-1370 # 90000060 <curbrk.4107>
800005c2:	c398                	sw	a4,0(a5)
    return (void *)(curbrk - incr);
800005c4:	10000797          	auipc	a5,0x10000
800005c8:	a9c78793          	addi	a5,a5,-1380 # 90000060 <curbrk.4107>
800005cc:	4398                	lw	a4,0(a5)
800005ce:	fec42783          	lw	a5,-20(s0)
800005d2:	40f007b3          	neg	a5,a5
800005d6:	97ba                	add	a5,a5,a4
}
800005d8:	853e                	mv	a0,a5
800005da:	4472                	lw	s0,28(sp)
800005dc:	6105                	addi	sp,sp,32
800005de:	8082                	ret

800005e0 <_write>:
#include <unistd.h>
#include <sys/types.h>
#include <nuclei_sdk_hal.h>

__WEAK ssize_t _write(int fd, const void* ptr, size_t len)
{
800005e0:	7179                	addi	sp,sp,-48
800005e2:	d606                	sw	ra,44(sp)
800005e4:	d422                	sw	s0,40(sp)
800005e6:	1800                	addi	s0,sp,48
800005e8:	fca42e23          	sw	a0,-36(s0)
800005ec:	fcb42c23          	sw	a1,-40(s0)
800005f0:	fcc42a23          	sw	a2,-44(s0)
    if (!isatty(fd)) {
800005f4:	fdc42503          	lw	a0,-36(s0)
800005f8:	54b000ef          	jal	ra,80001342 <isatty>
800005fc:	87aa                	mv	a5,a0
800005fe:	e399                	bnez	a5,80000604 <_write+0x24>
        return -1;
80000600:	57fd                	li	a5,-1
80000602:	a8b1                	j	8000065e <_write+0x7e>
    }

    const uint8_t *writebuf = (const uint8_t *)ptr;
80000604:	fd842783          	lw	a5,-40(s0)
80000608:	fef42423          	sw	a5,-24(s0)
    for (size_t i = 0; i < len; i++) {
8000060c:	fe042623          	sw	zero,-20(s0)
80000610:	a83d                	j	8000064e <_write+0x6e>
        if (writebuf[i] == '\n') {
80000612:	fe842703          	lw	a4,-24(s0)
80000616:	fec42783          	lw	a5,-20(s0)
8000061a:	97ba                	add	a5,a5,a4
8000061c:	0007c703          	lbu	a4,0(a5)
80000620:	47a9                	li	a5,10
80000622:	00f71663          	bne	a4,a5,8000062e <_write+0x4e>
            uart_write(SOC_DEBUG_UART, '\r');
80000626:	45b5                	li	a1,13
80000628:	10013537          	lui	a0,0x10013
8000062c:	33ed                	jal	80000416 <uart_write>
        }
        uart_write(SOC_DEBUG_UART, writebuf[i]);
8000062e:	fe842703          	lw	a4,-24(s0)
80000632:	fec42783          	lw	a5,-20(s0)
80000636:	97ba                	add	a5,a5,a4
80000638:	0007c783          	lbu	a5,0(a5)
8000063c:	85be                	mv	a1,a5
8000063e:	10013537          	lui	a0,0x10013
80000642:	3bd1                	jal	80000416 <uart_write>
    for (size_t i = 0; i < len; i++) {
80000644:	fec42783          	lw	a5,-20(s0)
80000648:	0785                	addi	a5,a5,1
8000064a:	fef42623          	sw	a5,-20(s0)
8000064e:	fec42703          	lw	a4,-20(s0)
80000652:	fd442783          	lw	a5,-44(s0)
80000656:	faf76ee3          	bltu	a4,a5,80000612 <_write+0x32>
    }
    return len;
8000065a:	fd442783          	lw	a5,-44(s0)
}
8000065e:	853e                	mv	a0,a5
80000660:	50b2                	lw	ra,44(sp)
80000662:	5422                	lw	s0,40(sp)
80000664:	6145                	addi	sp,sp,48
80000666:	8082                	ret

80000668 <get_timer_freq>:
#include "nuclei_sdk_soc.h"

static uint32_t get_timer_freq()
{
80000668:	1141                	addi	sp,sp,-16
8000066a:	c622                	sw	s0,12(sp)
8000066c:	0800                	addi	s0,sp,16
    return SOC_TIMER_FREQ;
8000066e:	67a1                	lui	a5,0x8
}
80000670:	853e                	mv	a0,a5
80000672:	4432                	lw	s0,12(sp)
80000674:	0141                	addi	sp,sp,16
80000676:	8082                	ret

80000678 <measure_cpu_freq>:

uint32_t measure_cpu_freq(uint32_t n)
{
80000678:	7139                	addi	sp,sp,-64
8000067a:	de06                	sw	ra,60(sp)
8000067c:	dc22                	sw	s0,56(sp)
8000067e:	da26                	sw	s1,52(sp)
80000680:	0080                	addi	s0,sp,64
80000682:	fca42623          	sw	a0,-52(s0)
    uint32_t start_mcycle, delta_mcycle;
    uint32_t start_mtime, delta_mtime;
    uint32_t mtime_freq = get_timer_freq();
80000686:	37cd                	jal	80000668 <get_timer_freq>
80000688:	fea42623          	sw	a0,-20(s0)
 * - Load value is 64bits wide.
 * - \ref SysTimer_SetLoadValue
 */
__STATIC_FORCEINLINE uint64_t SysTimer_GetLoadValue(void)
{
    return SysTimer->MTIMER;
8000068c:	020007b7          	lui	a5,0x2000
80000690:	4398                	lw	a4,0(a5)
80000692:	43dc                	lw	a5,4(a5)

    // Don't start measuruing until we see an mtime tick
    uint32_t tmp = (uint32_t)SysTimer_GetLoadValue();
80000694:	fee42423          	sw	a4,-24(s0)
80000698:	020007b7          	lui	a5,0x2000
8000069c:	4398                	lw	a4,0(a5)
8000069e:	43dc                	lw	a5,4(a5)
    do {
        start_mtime = (uint32_t)SysTimer_GetLoadValue();
800006a0:	fee42223          	sw	a4,-28(s0)
        start_mcycle = __RV_CSR_READ(CSR_MCYCLE);
800006a4:	b00027f3          	csrr	a5,mcycle
800006a8:	84be                	mv	s1,a5
800006aa:	87a6                	mv	a5,s1
800006ac:	fef42023          	sw	a5,-32(s0)
    } while (start_mtime == tmp);
800006b0:	fe442703          	lw	a4,-28(s0)
800006b4:	fe842783          	lw	a5,-24(s0)
800006b8:	fef700e3          	beq	a4,a5,80000698 <measure_cpu_freq+0x20>
800006bc:	020007b7          	lui	a5,0x2000
800006c0:	4398                	lw	a4,0(a5)
800006c2:	43dc                	lw	a5,4(a5)

    do {
        delta_mtime = (uint32_t)SysTimer_GetLoadValue() - start_mtime;
800006c4:	fe442783          	lw	a5,-28(s0)
800006c8:	40f707b3          	sub	a5,a4,a5
800006cc:	fcf42e23          	sw	a5,-36(s0)
        delta_mcycle = __RV_CSR_READ(CSR_MCYCLE) - start_mcycle;
800006d0:	b00027f3          	csrr	a5,mcycle
800006d4:	84be                	mv	s1,a5
800006d6:	8726                	mv	a4,s1
800006d8:	fe042783          	lw	a5,-32(s0)
800006dc:	40f707b3          	sub	a5,a4,a5
800006e0:	fcf42c23          	sw	a5,-40(s0)
    } while (delta_mtime < n);
800006e4:	fdc42703          	lw	a4,-36(s0)
800006e8:	fcc42783          	lw	a5,-52(s0)
800006ec:	fcf768e3          	bltu	a4,a5,800006bc <measure_cpu_freq+0x44>

    return (delta_mcycle / delta_mtime) * mtime_freq
800006f0:	fd842703          	lw	a4,-40(s0)
800006f4:	fdc42783          	lw	a5,-36(s0)
800006f8:	02f75733          	divu	a4,a4,a5
800006fc:	fec42783          	lw	a5,-20(s0)
80000700:	02f70733          	mul	a4,a4,a5
           + ((delta_mcycle % delta_mtime) * mtime_freq) / delta_mtime;
80000704:	fd842683          	lw	a3,-40(s0)
80000708:	fdc42783          	lw	a5,-36(s0)
8000070c:	02f6f6b3          	remu	a3,a3,a5
80000710:	fec42783          	lw	a5,-20(s0)
80000714:	02f686b3          	mul	a3,a3,a5
80000718:	fdc42783          	lw	a5,-36(s0)
8000071c:	02f6d7b3          	divu	a5,a3,a5
80000720:	97ba                	add	a5,a5,a4
}
80000722:	853e                	mv	a0,a5
80000724:	50f2                	lw	ra,60(sp)
80000726:	5462                	lw	s0,56(sp)
80000728:	54d2                	lw	s1,52(sp)
8000072a:	6121                	addi	sp,sp,64
8000072c:	8082                	ret

8000072e <get_cpu_freq>:

uint32_t get_cpu_freq()
{
8000072e:	1101                	addi	sp,sp,-32
80000730:	ce06                	sw	ra,28(sp)
80000732:	cc22                	sw	s0,24(sp)
80000734:	1000                	addi	s0,sp,32
    uint32_t cpu_freq;

    // warm up
    measure_cpu_freq(1);
80000736:	4505                	li	a0,1
80000738:	3781                	jal	80000678 <measure_cpu_freq>
    // measure for real
    cpu_freq = measure_cpu_freq(100);
8000073a:	06400513          	li	a0,100
8000073e:	3f2d                	jal	80000678 <measure_cpu_freq>
80000740:	fea42623          	sw	a0,-20(s0)

    return cpu_freq;
80000744:	fec42783          	lw	a5,-20(s0)
}
80000748:	853e                	mv	a0,a5
8000074a:	40f2                	lw	ra,28(sp)
8000074c:	4462                	lw	s0,24(sp)
8000074e:	6105                	addi	sp,sp,32
80000750:	8082                	ret

80000752 <SystemInit>:
 * oscillator (PLL) that is part of the microcontroller device. For systems
 * with a variable clock speed, it updates the variable \ref SystemCoreClock.
 * SystemInit is called from the file <b>startup<i>_device</i></b>.
 */
void SystemInit (void)
{
80000752:	1141                	addi	sp,sp,-16
80000754:	c622                	sw	s0,12(sp)
80000756:	0800                	addi	s0,sp,16
    /* ToDo: add code to initialize the system
     * Warn: do not use global variables because this function is called before
     * reaching pre-main. RW section maybe overwritten afterwards.
     */
    SystemCoreClock = SYSTEM_CLOCK;
80000758:	10000797          	auipc	a5,0x10000
8000075c:	90c78793          	addi	a5,a5,-1780 # 90000064 <SystemCoreClock>
80000760:	04c4b737          	lui	a4,0x4c4b
80000764:	40070713          	addi	a4,a4,1024 # 4c4b400 <__stack_size+0x4c4ac00>
80000768:	c398                	sw	a4,0(a5)
}
8000076a:	0001                	nop
8000076c:	4432                	lw	s0,12(sp)
8000076e:	0141                	addi	sp,sp,16
80000770:	8082                	ret

80000772 <system_default_exception_handler>:
 * \details
 * This function provided a default exception and NMI handling code for all exception ids.
 * By default, It will just print some information for debug, Vendor can customize it according to its requirements.
 */
static void system_default_exception_handler(unsigned long mcause, unsigned long sp)
{
80000772:	1101                	addi	sp,sp,-32
80000774:	ce06                	sw	ra,28(sp)
80000776:	cc22                	sw	s0,24(sp)
80000778:	1000                	addi	s0,sp,32
8000077a:	fea42623          	sw	a0,-20(s0)
8000077e:	feb42423          	sw	a1,-24(s0)
    /* TODO: Uncomment this if you have implement printf function */
    printf("MCAUSE : 0x%lx\r\n", mcause);
80000782:	fec42583          	lw	a1,-20(s0)
80000786:	00002517          	auipc	a0,0x2
8000078a:	d9650513          	addi	a0,a0,-618 # 8000251c <_read_r+0x48>
8000078e:	299000ef          	jal	ra,80001226 <iprintf>
    printf("MDCAUSE: 0x%lx\r\n", __RV_CSR_READ(CSR_MDCAUSE));
80000792:	7c9027f3          	csrr	a5,0x7c9
80000796:	80be                	mv	ra,a5
80000798:	8786                	mv	a5,ra
8000079a:	85be                	mv	a1,a5
8000079c:	00002517          	auipc	a0,0x2
800007a0:	d9450513          	addi	a0,a0,-620 # 80002530 <_read_r+0x5c>
800007a4:	283000ef          	jal	ra,80001226 <iprintf>
    printf("MEPC   : 0x%lx\r\n", __RV_CSR_READ(CSR_MEPC));
800007a8:	341027f3          	csrr	a5,mepc
800007ac:	80be                	mv	ra,a5
800007ae:	8786                	mv	a5,ra
800007b0:	85be                	mv	a1,a5
800007b2:	00002517          	auipc	a0,0x2
800007b6:	d9250513          	addi	a0,a0,-622 # 80002544 <_read_r+0x70>
800007ba:	26d000ef          	jal	ra,80001226 <iprintf>
    printf("MTVAL  : 0x%lx\r\n", __RV_CSR_READ(CSR_MTVAL));
800007be:	343027f3          	csrr	a5,mtval
800007c2:	80be                	mv	ra,a5
800007c4:	8786                	mv	a5,ra
800007c6:	85be                	mv	a1,a5
800007c8:	00002517          	auipc	a0,0x2
800007cc:	d9050513          	addi	a0,a0,-624 # 80002558 <_read_r+0x84>
800007d0:	257000ef          	jal	ra,80001226 <iprintf>
    while(1);
800007d4:	a001                	j	800007d4 <system_default_exception_handler+0x62>

800007d6 <Exception_Init>:
 * The core exception handler for each exception id will be initialized to \ref system_default_exception_handler.
 * \note
 * Called in \ref _init function, used to initialize default exception handlers for all exception IDs
 */
static void Exception_Init(void)
{
800007d6:	1101                	addi	sp,sp,-32
800007d8:	ce22                	sw	s0,28(sp)
800007da:	1000                	addi	s0,sp,32
    for (int i = 0; i < MAX_SYSTEM_EXCEPTION_NUM+1; i++) {
800007dc:	fe042623          	sw	zero,-20(s0)
800007e0:	a01d                	j	80000806 <Exception_Init+0x30>
        SystemExceptionHandlers[i] = (unsigned long)system_default_exception_handler;
800007e2:	00000717          	auipc	a4,0x0
800007e6:	f9070713          	addi	a4,a4,-112 # 80000772 <system_default_exception_handler>
800007ea:	10000697          	auipc	a3,0x10000
800007ee:	8b268693          	addi	a3,a3,-1870 # 9000009c <SystemExceptionHandlers>
800007f2:	fec42783          	lw	a5,-20(s0)
800007f6:	078a                	slli	a5,a5,0x2
800007f8:	97b6                	add	a5,a5,a3
800007fa:	c398                	sw	a4,0(a5)
    for (int i = 0; i < MAX_SYSTEM_EXCEPTION_NUM+1; i++) {
800007fc:	fec42783          	lw	a5,-20(s0)
80000800:	0785                	addi	a5,a5,1
80000802:	fef42623          	sw	a5,-20(s0)
80000806:	fec42703          	lw	a4,-20(s0)
8000080a:	47b1                	li	a5,12
8000080c:	fce7dbe3          	bge	a5,a4,800007e2 <Exception_Init+0xc>
    }
}
80000810:	0001                	nop
80000812:	0001                	nop
80000814:	4472                	lw	s0,28(sp)
80000816:	6105                	addi	sp,sp,32
80000818:	8082                	ret

8000081a <core_exception_handler>:
 *   for exception entry function, Silicon Vendor could modify the implementation.
 * - For the core_exception_handler template, we provided exception register function \ref Exception_Register_EXC
 *   which can help developer to register your exception handler for specific exception number.
 */
uint32_t core_exception_handler(unsigned long mcause, unsigned long sp)
{
8000081a:	7179                	addi	sp,sp,-48
8000081c:	d606                	sw	ra,44(sp)
8000081e:	d422                	sw	s0,40(sp)
80000820:	1800                	addi	s0,sp,48
80000822:	fca42e23          	sw	a0,-36(s0)
80000826:	fcb42c23          	sw	a1,-40(s0)
    uint32_t EXCn = (uint32_t)(mcause & 0X00000fff);
8000082a:	fdc42703          	lw	a4,-36(s0)
8000082e:	6785                	lui	a5,0x1
80000830:	17fd                	addi	a5,a5,-1
80000832:	8ff9                	and	a5,a5,a4
80000834:	fef42423          	sw	a5,-24(s0)
    EXC_HANDLER exc_handler;

    if ((EXCn < MAX_SYSTEM_EXCEPTION_NUM) && (EXCn >= 0)) {
80000838:	fe842703          	lw	a4,-24(s0)
8000083c:	47ad                	li	a5,11
8000083e:	00e7ee63          	bltu	a5,a4,8000085a <core_exception_handler+0x40>
        exc_handler = (EXC_HANDLER)SystemExceptionHandlers[EXCn];
80000842:	10000717          	auipc	a4,0x10000
80000846:	85a70713          	addi	a4,a4,-1958 # 9000009c <SystemExceptionHandlers>
8000084a:	fe842783          	lw	a5,-24(s0)
8000084e:	078a                	slli	a5,a5,0x2
80000850:	97ba                	add	a5,a5,a4
80000852:	439c                	lw	a5,0(a5)
80000854:	fef42623          	sw	a5,-20(s0)
80000858:	a02d                	j	80000882 <core_exception_handler+0x68>
    } else if (EXCn == NMI_EXCn) {
8000085a:	fe842703          	lw	a4,-24(s0)
8000085e:	6785                	lui	a5,0x1
80000860:	17fd                	addi	a5,a5,-1
80000862:	00f71a63          	bne	a4,a5,80000876 <core_exception_handler+0x5c>
        exc_handler = (EXC_HANDLER)SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM];
80000866:	10000797          	auipc	a5,0x10000
8000086a:	83678793          	addi	a5,a5,-1994 # 9000009c <SystemExceptionHandlers>
8000086e:	5b9c                	lw	a5,48(a5)
80000870:	fef42623          	sw	a5,-20(s0)
80000874:	a039                	j	80000882 <core_exception_handler+0x68>
    } else {
        exc_handler = (EXC_HANDLER)system_default_exception_handler;
80000876:	00000797          	auipc	a5,0x0
8000087a:	efc78793          	addi	a5,a5,-260 # 80000772 <system_default_exception_handler>
8000087e:	fef42623          	sw	a5,-20(s0)
    }
    if (exc_handler != NULL) {
80000882:	fec42783          	lw	a5,-20(s0)
80000886:	cb81                	beqz	a5,80000896 <core_exception_handler+0x7c>
        exc_handler(mcause, sp);
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	fd842583          	lw	a1,-40(s0)
80000890:	fdc42503          	lw	a0,-36(s0)
80000894:	9782                	jalr	a5
    }
    return 0;
80000896:	4781                	li	a5,0
}
80000898:	853e                	mv	a0,a5
8000089a:	50b2                	lw	ra,44(sp)
8000089c:	5422                	lw	s0,40(sp)
8000089e:	6145                	addi	sp,sp,48
800008a0:	8082                	ret

800008a2 <SystemBannerPrint>:
/** @} */ /* End of Doxygen Group NMSIS_Core_ExceptionAndNMI */

/** Banner Print for Nuclei SDK */
void SystemBannerPrint(void)
{
800008a2:	1101                	addi	sp,sp,-32
800008a4:	ce06                	sw	ra,28(sp)
800008a6:	cc22                	sw	s0,24(sp)
800008a8:	1000                	addi	s0,sp,32
#if defined(NUCLEI_BANNER) && (NUCLEI_BANNER == 1)
#ifndef DOWNLOAD_MODE
#error DOWNLOAD_MODE is not defined via build system, please check!
#endif
    const char* download_modes[] = {"FLASHXIP", "FLASH", "ILM", "DDR"};
800008aa:	00002797          	auipc	a5,0x2
800008ae:	d2678793          	addi	a5,a5,-730 # 800025d0 <_read_r+0xfc>
800008b2:	4390                	lw	a2,0(a5)
800008b4:	43d4                	lw	a3,4(a5)
800008b6:	4798                	lw	a4,8(a5)
800008b8:	47dc                	lw	a5,12(a5)
800008ba:	fec42023          	sw	a2,-32(s0)
800008be:	fed42223          	sw	a3,-28(s0)
800008c2:	fee42423          	sw	a4,-24(s0)
800008c6:	fef42623          	sw	a5,-20(s0)
    printf("Nuclei SDK Build Time: %s, %s\r\n", __DATE__, __TIME__);
800008ca:	00002617          	auipc	a2,0x2
800008ce:	ca260613          	addi	a2,a2,-862 # 8000256c <_read_r+0x98>
800008d2:	00002597          	auipc	a1,0x2
800008d6:	ca658593          	addi	a1,a1,-858 # 80002578 <_read_r+0xa4>
800008da:	00002517          	auipc	a0,0x2
800008de:	caa50513          	addi	a0,a0,-854 # 80002584 <_read_r+0xb0>
800008e2:	145000ef          	jal	ra,80001226 <iprintf>
    printf("Download Mode: %s\r\n", download_modes[DOWNLOAD_MODE]);
800008e6:	fe842783          	lw	a5,-24(s0)
800008ea:	85be                	mv	a1,a5
800008ec:	00002517          	auipc	a0,0x2
800008f0:	cb850513          	addi	a0,a0,-840 # 800025a4 <_read_r+0xd0>
800008f4:	133000ef          	jal	ra,80001226 <iprintf>
    printf("CPU Frequency %lu Hz\r\n", SystemCoreClock);
800008f8:	0ffff797          	auipc	a5,0xffff
800008fc:	76c78793          	addi	a5,a5,1900 # 90000064 <SystemCoreClock>
80000900:	439c                	lw	a5,0(a5)
80000902:	85be                	mv	a1,a5
80000904:	00002517          	auipc	a0,0x2
80000908:	cb450513          	addi	a0,a0,-844 # 800025b8 <_read_r+0xe4>
8000090c:	11b000ef          	jal	ra,80001226 <iprintf>
#endif
}
80000910:	0001                	nop
80000912:	40f2                	lw	ra,28(sp)
80000914:	4462                	lw	s0,24(sp)
80000916:	6105                	addi	sp,sp,32
80000918:	8082                	ret

8000091a <ECLIC_Init>:
 * ECLIC needs be initialized after boot up,
 * Vendor could also change the initialization
 * configuration.
 */
void ECLIC_Init(void)
{
8000091a:	1101                	addi	sp,sp,-32
8000091c:	ce22                	sw	s0,28(sp)
8000091e:	1000                	addi	s0,sp,32
80000920:	fe0405a3          	sb	zero,-21(s0)
 * \sa
 * - \ref ECLIC_GetMth
 */
__STATIC_FORCEINLINE void __ECLIC_SetMth(uint8_t mth)
{
    ECLIC->MTH = mth;
80000924:	0c0007b7          	lui	a5,0xc000
80000928:	feb44703          	lbu	a4,-21(s0)
8000092c:	00e785a3          	sb	a4,11(a5) # c00000b <__stack_size+0xbfff80b>
}
80000930:	0001                	nop
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
80000932:	0c0007b7          	lui	a5,0xc000
80000936:	43dc                	lw	a5,4(a5)
80000938:	83d5                	srli	a5,a5,0x15
8000093a:	8bbd                	andi	a5,a5,15
8000093c:	fef42623          	sw	a5,-20(s0)
    ECLIC->CFG &= ~CLIC_CLICCFG_NLBIT_Msk;
80000940:	0c0007b7          	lui	a5,0xc000
80000944:	0007c783          	lbu	a5,0(a5) # c000000 <__stack_size+0xbfff800>
80000948:	0ff7f713          	andi	a4,a5,255
8000094c:	0c0007b7          	lui	a5,0xc000
80000950:	9b05                	andi	a4,a4,-31
80000952:	0ff77713          	andi	a4,a4,255
80000956:	00e78023          	sb	a4,0(a5) # c000000 <__stack_size+0xbfff800>
    ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
8000095a:	0c0007b7          	lui	a5,0xc000
8000095e:	0007c783          	lbu	a5,0(a5) # c000000 <__stack_size+0xbfff800>
80000962:	0ff7f793          	andi	a5,a5,255
80000966:	01879713          	slli	a4,a5,0x18
8000096a:	8761                	srai	a4,a4,0x18
8000096c:	fec42783          	lw	a5,-20(s0)
80000970:	0ff7f793          	andi	a5,a5,255
80000974:	0786                	slli	a5,a5,0x1
80000976:	0ff7f793          	andi	a5,a5,255
8000097a:	07e2                	slli	a5,a5,0x18
8000097c:	87e1                	srai	a5,a5,0x18
8000097e:	8bf9                	andi	a5,a5,30
80000980:	07e2                	slli	a5,a5,0x18
80000982:	87e1                	srai	a5,a5,0x18
80000984:	8fd9                	or	a5,a5,a4
80000986:	01879713          	slli	a4,a5,0x18
8000098a:	8761                	srai	a4,a4,0x18
8000098c:	0c0007b7          	lui	a5,0xc000
80000990:	0ff77713          	andi	a4,a4,255
80000994:	00e78023          	sb	a4,0(a5) # c000000 <__stack_size+0xbfff800>
}
80000998:	0001                	nop
    /* Global Configuration about MTH and NLBits.
     * TODO: Please adapt it according to your system requirement.
     * This function is called in _init function */
    ECLIC_SetMth(0);
    ECLIC_SetCfgNlbits(__ECLIC_INTCTLBITS);
}
8000099a:	0001                	nop
8000099c:	4472                	lw	s0,28(sp)
8000099e:	6105                	addi	sp,sp,32
800009a0:	8082                	ret

800009a2 <ECLIC_Register_IRQ>:
 * \remarks
 * - This function use to configure specific eclic interrupt and register its interrupt handler and enable its interrupt.
 * - If the vector table is placed in read-only section(FLASHXIP mode), handler could not be installed
 */
int32_t ECLIC_Register_IRQ(IRQn_Type IRQn, uint8_t shv, ECLIC_TRIGGER_Type trig_mode, uint8_t lvl, uint8_t priority, void *handler)
{
800009a2:	7119                	addi	sp,sp,-128
800009a4:	dea2                	sw	s0,124(sp)
800009a6:	dca6                	sw	s1,120(sp)
800009a8:	0100                	addi	s0,sp,128
800009aa:	f8a42623          	sw	a0,-116(s0)
800009ae:	f8c42223          	sw	a2,-124(s0)
800009b2:	f8f42023          	sw	a5,-128(s0)
800009b6:	87ae                	mv	a5,a1
800009b8:	f8f405a3          	sb	a5,-117(s0)
800009bc:	87b6                	mv	a5,a3
800009be:	f8f40523          	sb	a5,-118(s0)
800009c2:	87ba                	mv	a5,a4
800009c4:	f8f404a3          	sb	a5,-119(s0)
    if ((IRQn > SOC_INT_MAX) || (shv > ECLIC_VECTOR_INTERRUPT) \
800009c8:	f8c42703          	lw	a4,-116(s0)
800009cc:	03300793          	li	a5,51
800009d0:	00e7ec63          	bltu	a5,a4,800009e8 <ECLIC_Register_IRQ+0x46>
800009d4:	f8b44703          	lbu	a4,-117(s0)
800009d8:	4785                	li	a5,1
800009da:	00e7e763          	bltu	a5,a4,800009e8 <ECLIC_Register_IRQ+0x46>
        || (trig_mode > ECLIC_NEGTIVE_EDGE_TRIGGER )) {
800009de:	f8442703          	lw	a4,-124(s0)
800009e2:	478d                	li	a5,3
800009e4:	00e7f463          	bgeu	a5,a4,800009ec <ECLIC_Register_IRQ+0x4a>
        return -1;
800009e8:	57fd                	li	a5,-1
800009ea:	a66d                	j	80000d94 <ECLIC_Register_IRQ+0x3f2>
    }

    /* set interrupt vector mode */
    ECLIC_SetShvIRQ(IRQn, shv);
800009ec:	f8b44783          	lbu	a5,-117(s0)
800009f0:	f8c42703          	lw	a4,-116(s0)
800009f4:	fae42623          	sw	a4,-84(s0)
800009f8:	faf42423          	sw	a5,-88(s0)
 * \sa
 * - \ref ECLIC_GetShvIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetShvIRQ(IRQn_Type IRQn, uint32_t shv)
{
    ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_SHV_Msk;
800009fc:	0c000737          	lui	a4,0xc000
80000a00:	fac42783          	lw	a5,-84(s0)
80000a04:	40078793          	addi	a5,a5,1024
80000a08:	078a                	slli	a5,a5,0x2
80000a0a:	97ba                	add	a5,a5,a4
80000a0c:	0027c783          	lbu	a5,2(a5)
80000a10:	0ff7f793          	andi	a5,a5,255
80000a14:	0c0006b7          	lui	a3,0xc000
80000a18:	9bf9                	andi	a5,a5,-2
80000a1a:	0ff7f713          	andi	a4,a5,255
80000a1e:	fac42783          	lw	a5,-84(s0)
80000a22:	40078793          	addi	a5,a5,1024
80000a26:	078a                	slli	a5,a5,0x2
80000a28:	97b6                	add	a5,a5,a3
80000a2a:	00e78123          	sb	a4,2(a5)
    ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(shv<<CLIC_INTATTR_SHV_Pos);
80000a2e:	0c000737          	lui	a4,0xc000
80000a32:	fac42783          	lw	a5,-84(s0)
80000a36:	40078793          	addi	a5,a5,1024
80000a3a:	078a                	slli	a5,a5,0x2
80000a3c:	97ba                	add	a5,a5,a4
80000a3e:	0027c783          	lbu	a5,2(a5)
80000a42:	0ff7f713          	andi	a4,a5,255
80000a46:	fa842783          	lw	a5,-88(s0)
80000a4a:	0ff7f793          	andi	a5,a5,255
80000a4e:	0c0006b7          	lui	a3,0xc000
80000a52:	8fd9                	or	a5,a5,a4
80000a54:	0ff7f713          	andi	a4,a5,255
80000a58:	fac42783          	lw	a5,-84(s0)
80000a5c:	40078793          	addi	a5,a5,1024
80000a60:	078a                	slli	a5,a5,0x2
80000a62:	97b6                	add	a5,a5,a3
80000a64:	00e78123          	sb	a4,2(a5)
}
80000a68:	0001                	nop
80000a6a:	f8c42783          	lw	a5,-116(s0)
80000a6e:	faf42a23          	sw	a5,-76(s0)
80000a72:	f8442783          	lw	a5,-124(s0)
80000a76:	faf42823          	sw	a5,-80(s0)
    ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_TRIG_Msk;
80000a7a:	0c000737          	lui	a4,0xc000
80000a7e:	fb442783          	lw	a5,-76(s0)
80000a82:	40078793          	addi	a5,a5,1024
80000a86:	078a                	slli	a5,a5,0x2
80000a88:	97ba                	add	a5,a5,a4
80000a8a:	0027c783          	lbu	a5,2(a5)
80000a8e:	0ff7f793          	andi	a5,a5,255
80000a92:	0c0006b7          	lui	a3,0xc000
80000a96:	9be5                	andi	a5,a5,-7
80000a98:	0ff7f713          	andi	a4,a5,255
80000a9c:	fb442783          	lw	a5,-76(s0)
80000aa0:	40078793          	addi	a5,a5,1024
80000aa4:	078a                	slli	a5,a5,0x2
80000aa6:	97b6                	add	a5,a5,a3
80000aa8:	00e78123          	sb	a4,2(a5)
    ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(trig<<CLIC_INTATTR_TRIG_Pos);
80000aac:	0c000737          	lui	a4,0xc000
80000ab0:	fb442783          	lw	a5,-76(s0)
80000ab4:	40078793          	addi	a5,a5,1024
80000ab8:	078a                	slli	a5,a5,0x2
80000aba:	97ba                	add	a5,a5,a4
80000abc:	0027c783          	lbu	a5,2(a5)
80000ac0:	0ff7f713          	andi	a4,a5,255
80000ac4:	fb042783          	lw	a5,-80(s0)
80000ac8:	0ff7f793          	andi	a5,a5,255
80000acc:	0786                	slli	a5,a5,0x1
80000ace:	0ff7f793          	andi	a5,a5,255
80000ad2:	0c0006b7          	lui	a3,0xc000
80000ad6:	8fd9                	or	a5,a5,a4
80000ad8:	0ff7f713          	andi	a4,a5,255
80000adc:	fb442783          	lw	a5,-76(s0)
80000ae0:	40078793          	addi	a5,a5,1024
80000ae4:	078a                	slli	a5,a5,0x2
80000ae6:	97b6                	add	a5,a5,a3
80000ae8:	00e78123          	sb	a4,2(a5)
}
80000aec:	0001                	nop
80000aee:	f8c42783          	lw	a5,-116(s0)
80000af2:	fcf42823          	sw	a5,-48(s0)
80000af6:	f8a44783          	lbu	a5,-118(s0)
80000afa:	fcf407a3          	sb	a5,-49(s0)
    return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
80000afe:	0c0007b7          	lui	a5,0xc000
80000b02:	0007c783          	lbu	a5,0(a5) # c000000 <__stack_size+0xbfff800>
80000b06:	0ff7f793          	andi	a5,a5,255
80000b0a:	8385                	srli	a5,a5,0x1
80000b0c:	8bbd                	andi	a5,a5,15
 * \sa
 * - \ref ECLIC_GetLevelIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetLevelIRQ(IRQn_Type IRQn, uint8_t lvl_abs)
{
    uint8_t nlbits = __ECLIC_GetCfgNlbits();
80000b0e:	fcf40723          	sb	a5,-50(s0)
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
80000b12:	0c0007b7          	lui	a5,0xc000
80000b16:	43dc                	lw	a5,4(a5)
80000b18:	83d5                	srli	a5,a5,0x15
80000b1a:	8bbd                	andi	a5,a5,15
    uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
80000b1c:	fcf406a3          	sb	a5,-51(s0)

    if (nlbits == 0) {
80000b20:	fce44783          	lbu	a5,-50(s0)
80000b24:	c7f1                	beqz	a5,80000bf0 <ECLIC_Register_IRQ+0x24e>
        return;
    }

    if (nlbits > intctlbits) {
80000b26:	fce44703          	lbu	a4,-50(s0)
80000b2a:	fcd44783          	lbu	a5,-51(s0)
80000b2e:	00e7f663          	bgeu	a5,a4,80000b3a <ECLIC_Register_IRQ+0x198>
        nlbits = intctlbits;
80000b32:	fcd44783          	lbu	a5,-51(s0)
80000b36:	fcf40723          	sb	a5,-50(s0)
    }
    uint8_t maxlvl = ((1 << nlbits) - 1);
80000b3a:	fce44783          	lbu	a5,-50(s0)
80000b3e:	4705                	li	a4,1
80000b40:	00f717b3          	sll	a5,a4,a5
80000b44:	0ff7f793          	andi	a5,a5,255
80000b48:	17fd                	addi	a5,a5,-1
80000b4a:	fcf40623          	sb	a5,-52(s0)
    if (lvl_abs > maxlvl) {
80000b4e:	fcf44703          	lbu	a4,-49(s0)
80000b52:	fcc44783          	lbu	a5,-52(s0)
80000b56:	00e7f663          	bgeu	a5,a4,80000b62 <ECLIC_Register_IRQ+0x1c0>
        lvl_abs = maxlvl;
80000b5a:	fcc44783          	lbu	a5,-52(s0)
80000b5e:	fcf407a3          	sb	a5,-49(s0)
    }
    uint8_t lvl = lvl_abs << (ECLIC_MAX_NLBITS - nlbits);
80000b62:	fcf44703          	lbu	a4,-49(s0)
80000b66:	fce44783          	lbu	a5,-50(s0)
80000b6a:	46a1                	li	a3,8
80000b6c:	40f687b3          	sub	a5,a3,a5
80000b70:	00f717b3          	sll	a5,a4,a5
80000b74:	fcf405a3          	sb	a5,-53(s0)
80000b78:	fd042783          	lw	a5,-48(s0)
80000b7c:	fcf42223          	sw	a5,-60(s0)
    return (ECLIC->CTRL[IRQn].INTCTRL);
80000b80:	0c000737          	lui	a4,0xc000
80000b84:	fc442783          	lw	a5,-60(s0)
80000b88:	40078793          	addi	a5,a5,1024 # c000400 <__stack_size+0xbfffc00>
80000b8c:	078a                	slli	a5,a5,0x2
80000b8e:	97ba                	add	a5,a5,a4
80000b90:	0037c783          	lbu	a5,3(a5)
80000b94:	0ff7f793          	andi	a5,a5,255
    uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
80000b98:	fcf401a3          	sb	a5,-61(s0)
    cur_ctrl = cur_ctrl << nlbits;
80000b9c:	fc344703          	lbu	a4,-61(s0)
80000ba0:	fce44783          	lbu	a5,-50(s0)
80000ba4:	00f717b3          	sll	a5,a4,a5
80000ba8:	fcf401a3          	sb	a5,-61(s0)
    cur_ctrl = cur_ctrl >> nlbits;
80000bac:	fc344703          	lbu	a4,-61(s0)
80000bb0:	fce44783          	lbu	a5,-50(s0)
80000bb4:	40f757b3          	sra	a5,a4,a5
80000bb8:	fcf401a3          	sb	a5,-61(s0)
    __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
80000bbc:	fcb44703          	lbu	a4,-53(s0)
80000bc0:	fc344783          	lbu	a5,-61(s0)
80000bc4:	8fd9                	or	a5,a5,a4
80000bc6:	0ff7f793          	andi	a5,a5,255
80000bca:	fd042703          	lw	a4,-48(s0)
80000bce:	fae42e23          	sw	a4,-68(s0)
80000bd2:	faf40da3          	sb	a5,-69(s0)
    ECLIC->CTRL[IRQn].INTCTRL = intctrl;
80000bd6:	0c000737          	lui	a4,0xc000
80000bda:	fbc42783          	lw	a5,-68(s0)
80000bde:	40078793          	addi	a5,a5,1024
80000be2:	078a                	slli	a5,a5,0x2
80000be4:	97ba                	add	a5,a5,a4
80000be6:	fbb44703          	lbu	a4,-69(s0)
80000bea:	00e781a3          	sb	a4,3(a5)
}
80000bee:	a011                	j	80000bf2 <ECLIC_Register_IRQ+0x250>
        return;
80000bf0:	0001                	nop
80000bf2:	f8c42783          	lw	a5,-116(s0)
80000bf6:	fef42623          	sw	a5,-20(s0)
80000bfa:	f8944783          	lbu	a5,-119(s0)
80000bfe:	fef405a3          	sb	a5,-21(s0)
    return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
80000c02:	0c0007b7          	lui	a5,0xc000
80000c06:	0007c783          	lbu	a5,0(a5) # c000000 <__stack_size+0xbfff800>
80000c0a:	0ff7f793          	andi	a5,a5,255
80000c0e:	8385                	srli	a5,a5,0x1
80000c10:	8bbd                	andi	a5,a5,15
 * \sa
 * - \ref ECLIC_GetPriorityIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetPriorityIRQ(IRQn_Type IRQn, uint8_t pri)
{
    uint8_t nlbits = __ECLIC_GetCfgNlbits();
80000c12:	fef40523          	sb	a5,-22(s0)
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
80000c16:	0c0007b7          	lui	a5,0xc000
80000c1a:	43dc                	lw	a5,4(a5)
80000c1c:	83d5                	srli	a5,a5,0x15
80000c1e:	8bbd                	andi	a5,a5,15
    uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
80000c20:	fef404a3          	sb	a5,-23(s0)
    if (nlbits < intctlbits) {
80000c24:	fea44703          	lbu	a4,-22(s0)
80000c28:	fe944783          	lbu	a5,-23(s0)
80000c2c:	0ef77663          	bgeu	a4,a5,80000d18 <ECLIC_Register_IRQ+0x376>
        uint8_t maxpri = ((1 << (intctlbits - nlbits)) - 1);
80000c30:	fe944703          	lbu	a4,-23(s0)
80000c34:	fea44783          	lbu	a5,-22(s0)
80000c38:	40f707b3          	sub	a5,a4,a5
80000c3c:	4705                	li	a4,1
80000c3e:	00f717b3          	sll	a5,a4,a5
80000c42:	0ff7f793          	andi	a5,a5,255
80000c46:	17fd                	addi	a5,a5,-1
80000c48:	fef40423          	sb	a5,-24(s0)
        if (pri > maxpri) {
80000c4c:	feb44703          	lbu	a4,-21(s0)
80000c50:	fe844783          	lbu	a5,-24(s0)
80000c54:	00e7f663          	bgeu	a5,a4,80000c60 <ECLIC_Register_IRQ+0x2be>
            pri = maxpri;
80000c58:	fe844783          	lbu	a5,-24(s0)
80000c5c:	fef405a3          	sb	a5,-21(s0)
        }
        pri = pri << (ECLIC_MAX_NLBITS - intctlbits);
80000c60:	feb44703          	lbu	a4,-21(s0)
80000c64:	fe944783          	lbu	a5,-23(s0)
80000c68:	46a1                	li	a3,8
80000c6a:	40f687b3          	sub	a5,a3,a5
80000c6e:	00f717b3          	sll	a5,a4,a5
80000c72:	fef405a3          	sb	a5,-21(s0)
        uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
80000c76:	fe944783          	lbu	a5,-23(s0)
80000c7a:	0ff00713          	li	a4,255
80000c7e:	40f757b3          	sra	a5,a4,a5
80000c82:	fef403a3          	sb	a5,-25(s0)
        pri = pri | mask;
80000c86:	feb44703          	lbu	a4,-21(s0)
80000c8a:	fe744783          	lbu	a5,-25(s0)
80000c8e:	8fd9                	or	a5,a5,a4
80000c90:	fef405a3          	sb	a5,-21(s0)
80000c94:	fec42783          	lw	a5,-20(s0)
80000c98:	fef42023          	sw	a5,-32(s0)
    return (ECLIC->CTRL[IRQn].INTCTRL);
80000c9c:	0c000737          	lui	a4,0xc000
80000ca0:	fe042783          	lw	a5,-32(s0)
80000ca4:	40078793          	addi	a5,a5,1024 # c000400 <__stack_size+0xbfffc00>
80000ca8:	078a                	slli	a5,a5,0x2
80000caa:	97ba                	add	a5,a5,a4
80000cac:	0037c783          	lbu	a5,3(a5)
80000cb0:	0ff7f793          	andi	a5,a5,255
        uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
80000cb4:	fcf40fa3          	sb	a5,-33(s0)
        cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
80000cb8:	fdf44703          	lbu	a4,-33(s0)
80000cbc:	fea44783          	lbu	a5,-22(s0)
80000cc0:	46a1                	li	a3,8
80000cc2:	40f687b3          	sub	a5,a3,a5
80000cc6:	40f757b3          	sra	a5,a4,a5
80000cca:	fcf40fa3          	sb	a5,-33(s0)
        cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
80000cce:	fdf44703          	lbu	a4,-33(s0)
80000cd2:	fea44783          	lbu	a5,-22(s0)
80000cd6:	46a1                	li	a3,8
80000cd8:	40f687b3          	sub	a5,a3,a5
80000cdc:	00f717b3          	sll	a5,a4,a5
80000ce0:	fcf40fa3          	sb	a5,-33(s0)
        __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | pri));
80000ce4:	feb44703          	lbu	a4,-21(s0)
80000ce8:	fdf44783          	lbu	a5,-33(s0)
80000cec:	8fd9                	or	a5,a5,a4
80000cee:	0ff7f793          	andi	a5,a5,255
80000cf2:	fec42703          	lw	a4,-20(s0)
80000cf6:	fce42c23          	sw	a4,-40(s0)
80000cfa:	fcf40ba3          	sb	a5,-41(s0)
    ECLIC->CTRL[IRQn].INTCTRL = intctrl;
80000cfe:	0c000737          	lui	a4,0xc000
80000d02:	fd842783          	lw	a5,-40(s0)
80000d06:	40078793          	addi	a5,a5,1024
80000d0a:	078a                	slli	a5,a5,0x2
80000d0c:	97ba                	add	a5,a5,a4
80000d0e:	fd744703          	lbu	a4,-41(s0)
80000d12:	00e781a3          	sb	a4,3(a5)
}
80000d16:	0001                	nop
    }
}
80000d18:	0001                	nop
    ECLIC_SetTrigIRQ(IRQn, trig_mode);
    /* set interrupt level */
    ECLIC_SetLevelIRQ(IRQn, lvl);
    /* set interrupt priority */
    ECLIC_SetPriorityIRQ(IRQn, priority);
    if (handler != NULL) {
80000d1a:	f8042783          	lw	a5,-128(s0)
80000d1e:	cb9d                	beqz	a5,80000d54 <ECLIC_Register_IRQ+0x3b2>
        /* set interrupt handler entry to vector table */
        ECLIC_SetVector(IRQn, (rv_csr_t)handler);
80000d20:	f8042783          	lw	a5,-128(s0)
80000d24:	f8c42703          	lw	a4,-116(s0)
80000d28:	fae42223          	sw	a4,-92(s0)
80000d2c:	faf42023          	sw	a5,-96(s0)
 */
__STATIC_FORCEINLINE void __ECLIC_SetVector(IRQn_Type IRQn, rv_csr_t vector)
{
#if __RISCV_XLEN == 32
    volatile uint32_t vec_base;
    vec_base = ((uint32_t)__RV_CSR_READ(CSR_MTVT));
80000d30:	307027f3          	csrr	a5,0x307
80000d34:	84be                	mv	s1,a5
80000d36:	87a6                	mv	a5,s1
80000d38:	f8f42c23          	sw	a5,-104(s0)
    (* (unsigned long *) (vec_base + ((int32_t)IRQn) * 4)) = vector;
80000d3c:	fa442783          	lw	a5,-92(s0)
80000d40:	078a                	slli	a5,a5,0x2
80000d42:	873e                	mv	a4,a5
80000d44:	f9842783          	lw	a5,-104(s0)
80000d48:	97ba                	add	a5,a5,a4
80000d4a:	873e                	mv	a4,a5
80000d4c:	fa042783          	lw	a5,-96(s0)
80000d50:	c31c                	sw	a5,0(a4)
#else // TODO Need cover for XLEN=128 case in future
    volatile uint64_t vec_base;
    vec_base = ((uint64_t)__RV_CSR_READ(CSR_MTVT));
    (* (unsigned long *) (vec_base + ((int32_t)IRQn) * 8)) = vector;
#endif
}
80000d52:	0001                	nop
80000d54:	f8c42783          	lw	a5,-116(s0)
80000d58:	f8f42e23          	sw	a5,-100(s0)
    ECLIC->CTRL[IRQn].INTIE |= CLIC_INTIE_IE_Msk;
80000d5c:	0c000737          	lui	a4,0xc000
80000d60:	f9c42783          	lw	a5,-100(s0)
80000d64:	40078793          	addi	a5,a5,1024
80000d68:	078a                	slli	a5,a5,0x2
80000d6a:	97ba                	add	a5,a5,a4
80000d6c:	0017c783          	lbu	a5,1(a5)
80000d70:	0ff7f793          	andi	a5,a5,255
80000d74:	0c0006b7          	lui	a3,0xc000
80000d78:	0017e793          	ori	a5,a5,1
80000d7c:	0ff7f713          	andi	a4,a5,255
80000d80:	f9c42783          	lw	a5,-100(s0)
80000d84:	40078793          	addi	a5,a5,1024
80000d88:	078a                	slli	a5,a5,0x2
80000d8a:	97b6                	add	a5,a5,a3
80000d8c:	00e780a3          	sb	a4,1(a5)
}
80000d90:	0001                	nop
    }
    /* enable interrupt */
    ECLIC_EnableIRQ(IRQn);
    return 0;
80000d92:	4781                	li	a5,0
}
80000d94:	853e                	mv	a0,a5
80000d96:	5476                	lw	s0,124(sp)
80000d98:	54e6                	lw	s1,120(sp)
80000d9a:	6109                	addi	sp,sp,128
80000d9c:	8082                	ret

80000d9e <_premain_init>:
 * For RISC-V gnu toolchain, _init function might not be called
 * by __libc_init_array function, so we defined a new function
 * to do initialization
 */
void _premain_init(void)
{
80000d9e:	1141                	addi	sp,sp,-16
80000da0:	c606                	sw	ra,12(sp)
80000da2:	c422                	sw	s0,8(sp)
80000da4:	0800                	addi	s0,sp,16
    EnableICache();
#endif
#if defined(__DCACHE_PRESENT) && __DCACHE_PRESENT == 1
    EnableDCache();
#endif
    SystemCoreClock = get_cpu_freq();
80000da6:	3261                	jal	8000072e <get_cpu_freq>
80000da8:	872a                	mv	a4,a0
80000daa:	0ffff797          	auipc	a5,0xffff
80000dae:	2ba78793          	addi	a5,a5,698 # 90000064 <SystemCoreClock>
80000db2:	c398                	sw	a4,0(a5)
    gpio_iof_config(GPIO, IOF0_UART0_MASK, IOF_SEL_0);
80000db4:	4605                	li	a2,1
80000db6:	000305b7          	lui	a1,0x30
80000dba:	10012537          	lui	a0,0x10012
80000dbe:	d34ff0ef          	jal	ra,800002f2 <gpio_iof_config>
    uart_init(SOC_DEBUG_UART, 115200);
80000dc2:	67f1                	lui	a5,0x1c
80000dc4:	20078593          	addi	a1,a5,512 # 1c200 <__stack_size+0x1ba00>
80000dc8:	10013537          	lui	a0,0x10013
80000dcc:	de4ff0ef          	jal	ra,800003b0 <uart_init>
    /* Display banner after UART initialized */
    SystemBannerPrint();
80000dd0:	3cc9                	jal	800008a2 <SystemBannerPrint>
    /* Initialize exception default handlers */
    Exception_Init();
80000dd2:	3411                	jal	800007d6 <Exception_Init>
    /* ECLIC initialization, mainly MTH and NLBIT */
    ECLIC_Init();
80000dd4:	3699                	jal	8000091a <ECLIC_Init>
}
80000dd6:	0001                	nop
80000dd8:	40b2                	lw	ra,12(sp)
80000dda:	4422                	lw	s0,8(sp)
80000ddc:	0141                	addi	sp,sp,16
80000dde:	8082                	ret

80000de0 <_postmain_fini>:
 * For RISC-V gnu toolchain, _fini function might not be called
 * by __libc_fini_array function, so we defined a new function
 * to do initialization
 */
void _postmain_fini(int status)
{
80000de0:	1101                	addi	sp,sp,-32
80000de2:	ce22                	sw	s0,28(sp)
80000de4:	1000                	addi	s0,sp,32
80000de6:	fea42623          	sw	a0,-20(s0)
    /* TODO: Add your own finishing code here, called after main */
#ifdef SIMULATION_XLSPIKE
extern void xlspike_exit(int status);
    xlspike_exit(status);
#endif
}
80000dea:	0001                	nop
80000dec:	4472                	lw	s0,28(sp)
80000dee:	6105                	addi	sp,sp,32
80000df0:	8082                	ret

80000df2 <_init>:
 * error init.c:(.text.__libc_init_array+0x26): undefined reference to `_init'
 * \note
 * Please use \ref _premain_init function now
 */
void _init(void)
{
80000df2:	1141                	addi	sp,sp,-16
80000df4:	c622                	sw	s0,12(sp)
80000df6:	0800                	addi	s0,sp,16
    /* Don't put any code here, please use _premain_init now */
}
80000df8:	0001                	nop
80000dfa:	4432                	lw	s0,12(sp)
80000dfc:	0141                	addi	sp,sp,16
80000dfe:	8082                	ret

80000e00 <_fini>:
 * error fini.c:(.text.__libc_fini_array+0x28): undefined reference to `_fini'
 * \note
 * Please use \ref _postmain_fini function now
 */
void _fini(void)
{
80000e00:	1141                	addi	sp,sp,-16
80000e02:	c622                	sw	s0,12(sp)
80000e04:	0800                	addi	s0,sp,16
    /* Don't put any code here, please use _postmain_fini now */
}
80000e06:	0001                	nop
80000e08:	4432                	lw	s0,12(sp)
80000e0a:	0141                	addi	sp,sp,16
80000e0c:	8082                	ret

80000e0e <wait_seconds>:
static uint32_t int0_cnt = 0;    /* msip timer interrupt test counter */
static uint32_t int1_cnt = 0;    /* mtip timer interrupt test counter */
unsigned int msip_trig_flag = 1; /* sw trigger mtimer sw interrupt flag */

void wait_seconds(size_t n)
{
80000e0e:	7139                	addi	sp,sp,-64
80000e10:	de22                	sw	s0,60(sp)
80000e12:	0080                	addi	s0,sp,64
80000e14:	fca42623          	sw	a0,-52(s0)
80000e18:	020007b7          	lui	a5,0x2000
80000e1c:	4398                	lw	a4,0(a5)
80000e1e:	43dc                	lw	a5,4(a5)
    uint64_t start_mtime, delta_mtime;

    uint64_t tmp = SysTimer_GetLoadValue();
80000e20:	fee42423          	sw	a4,-24(s0)
80000e24:	fef42623          	sw	a5,-20(s0)
80000e28:	020007b7          	lui	a5,0x2000
80000e2c:	4398                	lw	a4,0(a5)
80000e2e:	43dc                	lw	a5,4(a5)
    do {
        start_mtime = SysTimer_GetLoadValue();
80000e30:	fee42023          	sw	a4,-32(s0)
80000e34:	fef42223          	sw	a5,-28(s0)
    } while (start_mtime == tmp);
80000e38:	fe042703          	lw	a4,-32(s0)
80000e3c:	fe842783          	lw	a5,-24(s0)
80000e40:	00f71963          	bne	a4,a5,80000e52 <wait_seconds+0x44>
80000e44:	fe442703          	lw	a4,-28(s0)
80000e48:	fec42783          	lw	a5,-20(s0)
80000e4c:	00f71363          	bne	a4,a5,80000e52 <wait_seconds+0x44>
80000e50:	bfe1                	j	80000e28 <wait_seconds+0x1a>
80000e52:	020007b7          	lui	a5,0x2000
80000e56:	0007a303          	lw	t1,0(a5) # 2000000 <__stack_size+0x1fff800>
80000e5a:	0047a383          	lw	t2,4(a5)

    do {
        delta_mtime = SysTimer_GetLoadValue() - start_mtime;
80000e5e:	fe042803          	lw	a6,-32(s0)
80000e62:	fe442883          	lw	a7,-28(s0)
80000e66:	41030533          	sub	a0,t1,a6
80000e6a:	87aa                	mv	a5,a0
80000e6c:	00f337b3          	sltu	a5,t1,a5
80000e70:	411385b3          	sub	a1,t2,a7
80000e74:	40f587b3          	sub	a5,a1,a5
80000e78:	85be                	mv	a1,a5
80000e7a:	fca42c23          	sw	a0,-40(s0)
80000e7e:	fcb42e23          	sw	a1,-36(s0)
    } while (delta_mtime < (n * SOC_TIMER_FREQ));
80000e82:	fcc42783          	lw	a5,-52(s0)
80000e86:	07be                	slli	a5,a5,0xf
80000e88:	863e                	mv	a2,a5
80000e8a:	4681                	li	a3,0
80000e8c:	fdc42783          	lw	a5,-36(s0)
80000e90:	8736                	mv	a4,a3
80000e92:	fce7e0e3          	bltu	a5,a4,80000e52 <wait_seconds+0x44>
80000e96:	fdc42783          	lw	a5,-36(s0)
80000e9a:	8736                	mv	a4,a3
80000e9c:	00e79763          	bne	a5,a4,80000eaa <wait_seconds+0x9c>
80000ea0:	fd842783          	lw	a5,-40(s0)
80000ea4:	8732                	mv	a4,a2
80000ea6:	fae7e6e3          	bltu	a5,a4,80000e52 <wait_seconds+0x44>
}
80000eaa:	0001                	nop
80000eac:	5472                	lw	s0,60(sp)
80000eae:	6121                	addi	sp,sp,64
80000eb0:	8082                	ret

80000eb2 <eclic_mtip_handler>:

void mtimer_irq_handler(void)
{
80000eb2:	1101                	addi	sp,sp,-32
80000eb4:	ce06                	sw	ra,28(sp)
80000eb6:	cc22                	sw	s0,24(sp)
80000eb8:	1000                	addi	s0,sp,32
    int0_cnt++;
80000eba:	0ffff797          	auipc	a5,0xffff
80000ebe:	1ce78793          	addi	a5,a5,462 # 90000088 <__bss_start>
80000ec2:	439c                	lw	a5,0(a5)
80000ec4:	00178713          	addi	a4,a5,1
80000ec8:	0ffff797          	auipc	a5,0xffff
80000ecc:	1c078793          	addi	a5,a5,448 # 90000088 <__bss_start>
80000ed0:	c398                	sw	a4,0(a5)
    wait_seconds(1);
80000ed2:	4505                	li	a0,1
80000ed4:	3f2d                	jal	80000e0e <wait_seconds>
    printf("MTimer IRQ handler %d\n\r", int0_cnt);
80000ed6:	0ffff797          	auipc	a5,0xffff
80000eda:	1b278793          	addi	a5,a5,434 # 90000088 <__bss_start>
80000ede:	439c                	lw	a5,0(a5)
80000ee0:	85be                	mv	a1,a5
80000ee2:	00001517          	auipc	a0,0x1
80000ee6:	6fe50513          	addi	a0,a0,1790 # 800025e0 <_read_r+0x10c>
80000eea:	2e35                	jal	80001226 <iprintf>
80000eec:	020007b7          	lui	a5,0x2000
80000ef0:	4398                	lw	a4,0(a5)
80000ef2:	43dc                	lw	a5,4(a5)
    uint64_t now = SysTimer_GetLoadValue();
80000ef4:	fee42423          	sw	a4,-24(s0)
80000ef8:	fef42623          	sw	a5,-20(s0)
    SysTimer_SetCompareValue(now + 0.5 * SOC_TIMER_FREQ);
80000efc:	fe842503          	lw	a0,-24(s0)
80000f00:	fec42583          	lw	a1,-20(s0)
80000f04:	2cb9                	jal	80001162 <__floatundidf>
80000f06:	22a50753          	fmv.d	fa4,fa0
80000f0a:	00001797          	auipc	a5,0x1
80000f0e:	75e78793          	addi	a5,a5,1886 # 80002668 <_read_r+0x194>
80000f12:	239c                	fld	fa5,0(a5)
80000f14:	02f777d3          	fadd.d	fa5,fa4,fa5
80000f18:	22f78553          	fmv.d	fa0,fa5
80000f1c:	2c01                	jal	8000112c <__fixunsdfdi>
80000f1e:	872a                	mv	a4,a0
80000f20:	87ae                	mv	a5,a1
80000f22:	fee42023          	sw	a4,-32(s0)
80000f26:	fef42223          	sw	a5,-28(s0)
 * - Modify the load value or compare value less to clear the interrupt.
 * - \ref SysTimer_GetCompareValue
 */
__STATIC_FORCEINLINE void SysTimer_SetCompareValue(uint64_t value)
{
    SysTimer->MTIMERCMP = value;
80000f2a:	020007b7          	lui	a5,0x2000
80000f2e:	fe042603          	lw	a2,-32(s0)
80000f32:	fe442683          	lw	a3,-28(s0)
80000f36:	c790                	sw	a2,8(a5)
80000f38:	c7d4                	sw	a3,12(a5)
}
80000f3a:	0001                	nop
}
80000f3c:	0001                	nop
80000f3e:	40f2                	lw	ra,28(sp)
80000f40:	4462                	lw	s0,24(sp)
80000f42:	6105                	addi	sp,sp,32
80000f44:	8082                	ret

80000f46 <eclic_msip_handler>:

void mtimer_sw_irq_handler(void)
{
80000f46:	1141                	addi	sp,sp,-16
80000f48:	c606                	sw	ra,12(sp)
80000f4a:	c422                	sw	s0,8(sp)
80000f4c:	0800                	addi	s0,sp,16
 * - \ref SysTimer_SetSWIRQ
 * - \ref SysTimer_GetMsipValue
 */
__STATIC_FORCEINLINE void SysTimer_ClearSWIRQ(void)
{
    SysTimer->MSIP &= ~SysTimer_MSIP_MSIP_Msk;
80000f4e:	02000737          	lui	a4,0x2000
80000f52:	6785                	lui	a5,0x1
80000f54:	97ba                	add	a5,a5,a4
80000f56:	ffc7a783          	lw	a5,-4(a5) # ffc <__stack_size+0x7fc>
80000f5a:	020006b7          	lui	a3,0x2000
80000f5e:	ffe7f713          	andi	a4,a5,-2
80000f62:	6785                	lui	a5,0x1
80000f64:	97b6                	add	a5,a5,a3
80000f66:	fee7ae23          	sw	a4,-4(a5) # ffc <__stack_size+0x7fc>
}
80000f6a:	0001                	nop
    SysTimer_ClearSWIRQ();
    int1_cnt++;
80000f6c:	0ffff797          	auipc	a5,0xffff
80000f70:	12078793          	addi	a5,a5,288 # 9000008c <int1_cnt>
80000f74:	439c                	lw	a5,0(a5)
80000f76:	00178713          	addi	a4,a5,1
80000f7a:	0ffff797          	auipc	a5,0xffff
80000f7e:	11278793          	addi	a5,a5,274 # 9000008c <int1_cnt>
80000f82:	c398                	sw	a4,0(a5)
    printf("MTimer SW IRQ handler %d\n\r", int1_cnt);
80000f84:	0ffff797          	auipc	a5,0xffff
80000f88:	10878793          	addi	a5,a5,264 # 9000008c <int1_cnt>
80000f8c:	439c                	lw	a5,0(a5)
80000f8e:	85be                	mv	a1,a5
80000f90:	00001517          	auipc	a0,0x1
80000f94:	66850513          	addi	a0,a0,1640 # 800025f8 <_read_r+0x124>
80000f98:	2479                	jal	80001226 <iprintf>
    msip_trig_flag = 1;
80000f9a:	0ffff797          	auipc	a5,0xffff
80000f9e:	0ce78793          	addi	a5,a5,206 # 90000068 <msip_trig_flag>
80000fa2:	4705                	li	a4,1
80000fa4:	c398                	sw	a4,0(a5)
}
80000fa6:	0001                	nop
80000fa8:	40b2                	lw	ra,12(sp)
80000faa:	4422                	lw	s0,8(sp)
80000fac:	0141                	addi	sp,sp,16
80000fae:	8082                	ret

80000fb0 <setup_timer>:

void setup_timer()
{
80000fb0:	7179                	addi	sp,sp,-48
80000fb2:	d606                	sw	ra,44(sp)
80000fb4:	d422                	sw	s0,40(sp)
80000fb6:	1800                	addi	s0,sp,48
    printf("init timer and start\n\r");
80000fb8:	00001517          	auipc	a0,0x1
80000fbc:	65c50513          	addi	a0,a0,1628 # 80002614 <_read_r+0x140>
80000fc0:	249d                	jal	80001226 <iprintf>
    return SysTimer->MTIMER;
80000fc2:	020007b7          	lui	a5,0x2000
80000fc6:	4398                	lw	a4,0(a5)
80000fc8:	43dc                	lw	a5,4(a5)
    uint64_t now = SysTimer_GetLoadValue();
80000fca:	fee42423          	sw	a4,-24(s0)
80000fce:	fef42623          	sw	a5,-20(s0)
    uint64_t then = now + 0.5 * SOC_TIMER_FREQ;
80000fd2:	fe842503          	lw	a0,-24(s0)
80000fd6:	fec42583          	lw	a1,-20(s0)
80000fda:	2261                	jal	80001162 <__floatundidf>
80000fdc:	22a50753          	fmv.d	fa4,fa0
80000fe0:	00001797          	auipc	a5,0x1
80000fe4:	68878793          	addi	a5,a5,1672 # 80002668 <_read_r+0x194>
80000fe8:	239c                	fld	fa5,0(a5)
80000fea:	02f777d3          	fadd.d	fa5,fa4,fa5
80000fee:	22f78553          	fmv.d	fa0,fa5
80000ff2:	2a2d                	jal	8000112c <__fixunsdfdi>
80000ff4:	872a                	mv	a4,a0
80000ff6:	87ae                	mv	a5,a1
80000ff8:	fee42023          	sw	a4,-32(s0)
80000ffc:	fef42223          	sw	a5,-28(s0)
80001000:	fe042703          	lw	a4,-32(s0)
80001004:	fe442783          	lw	a5,-28(s0)
80001008:	fce42c23          	sw	a4,-40(s0)
8000100c:	fcf42e23          	sw	a5,-36(s0)
    SysTimer->MTIMERCMP = value;
80001010:	020007b7          	lui	a5,0x2000
80001014:	fd842603          	lw	a2,-40(s0)
80001018:	fdc42683          	lw	a3,-36(s0)
8000101c:	c790                	sw	a2,8(a5)
8000101e:	c7d4                	sw	a3,12(a5)
}
80001020:	0001                	nop
    SysTimer_SetCompareValue(then);
}
80001022:	0001                	nop
80001024:	50b2                	lw	ra,44(sp)
80001026:	5422                	lw	s0,40(sp)
80001028:	6145                	addi	sp,sp,48
8000102a:	8082                	ret

8000102c <main>:

int main(void)
{
8000102c:	1101                	addi	sp,sp,-32
8000102e:	ce06                	sw	ra,28(sp)
80001030:	cc22                	sw	s0,24(sp)
80001032:	1000                	addi	s0,sp,32
    uint32_t returnCode;

    returnCode = ECLIC_Register_IRQ(
80001034:	00000797          	auipc	a5,0x0
80001038:	e7e78793          	addi	a5,a5,-386 # 80000eb2 <eclic_mtip_handler>
8000103c:	4701                	li	a4,0
8000103e:	4685                	li	a3,1
80001040:	4601                	li	a2,0
80001042:	4581                	li	a1,0
80001044:	451d                	li	a0,7
80001046:	3ab1                	jal	800009a2 <ECLIC_Register_IRQ>
80001048:	87aa                	mv	a5,a0
8000104a:	fef42623          	sw	a5,-20(s0)
 * \remarks
 *          Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
    __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
8000104e:	40a1                	li	ra,8
80001050:	3000a073          	csrs	mstatus,ra
}
80001054:	0001                	nop
        SysTimer_IRQn, ECLIC_NON_VECTOR_INTERRUPT, ECLIC_LEVEL_TRIGGER, 1, 0,
        mtimer_irq_handler); /* register system timer interrupt */

    __enable_irq(); /* enable global interrupt */

    setup_timer(); /* initialize timer */
80001056:	3fa9                	jal	80000fb0 <setup_timer>

    while (int0_cnt < 10);
80001058:	0001                	nop
8000105a:	0ffff797          	auipc	a5,0xffff
8000105e:	02e78793          	addi	a5,a5,46 # 90000088 <__bss_start>
80001062:	4398                	lw	a4,0(a5)
80001064:	47a5                	li	a5,9
80001066:	fee7fae3          	bgeu	a5,a4,8000105a <main+0x2e>
8000106a:	479d                	li	a5,7
8000106c:	fef42423          	sw	a5,-24(s0)
    ECLIC->CTRL[IRQn].INTIE &= ~CLIC_INTIE_IE_Msk;
80001070:	0c000737          	lui	a4,0xc000
80001074:	fe842783          	lw	a5,-24(s0)
80001078:	40078793          	addi	a5,a5,1024
8000107c:	078a                	slli	a5,a5,0x2
8000107e:	97ba                	add	a5,a5,a4
80001080:	0017c783          	lbu	a5,1(a5)
80001084:	0ff7f793          	andi	a5,a5,255
80001088:	0c0006b7          	lui	a3,0xc000
8000108c:	9bf9                	andi	a5,a5,-2
8000108e:	0ff7f713          	andi	a4,a5,255
80001092:	fe842783          	lw	a5,-24(s0)
80001096:	40078793          	addi	a5,a5,1024
8000109a:	078a                	slli	a5,a5,0x2
8000109c:	97b6                	add	a5,a5,a3
8000109e:	00e780a3          	sb	a4,1(a5)
}
800010a2:	0001                	nop
    ECLIC_DisableIRQ(SysTimer_IRQn); /* Disable MTIP iterrupt */

    returnCode = ECLIC_Register_IRQ(
800010a4:	00000797          	auipc	a5,0x0
800010a8:	ea278793          	addi	a5,a5,-350 # 80000f46 <eclic_msip_handler>
800010ac:	4701                	li	a4,0
800010ae:	4689                	li	a3,2
800010b0:	4605                	li	a2,1
800010b2:	4581                	li	a1,0
800010b4:	450d                	li	a0,3
800010b6:	30f5                	jal	800009a2 <ECLIC_Register_IRQ>
800010b8:	87aa                	mv	a5,a0
800010ba:	fef42623          	sw	a5,-20(s0)
        SysTimerSW_IRQn, ECLIC_NON_VECTOR_INTERRUPT,
        ECLIC_POSTIVE_EDGE_TRIGGER, 2, 0,
        mtimer_sw_irq_handler); /* register system timer SW interrupt */

    do {
        if (msip_trig_flag == 1) {
800010be:	0ffff797          	auipc	a5,0xffff
800010c2:	faa78793          	addi	a5,a5,-86 # 90000068 <msip_trig_flag>
800010c6:	4398                	lw	a4,0(a5)
800010c8:	4785                	li	a5,1
800010ca:	02f71963          	bne	a4,a5,800010fc <main+0xd0>
            msip_trig_flag = 0;
800010ce:	0ffff797          	auipc	a5,0xffff
800010d2:	f9a78793          	addi	a5,a5,-102 # 90000068 <msip_trig_flag>
800010d6:	0007a023          	sw	zero,0(a5)
    SysTimer->MSIP |= SysTimer_MSIP_MSIP_Msk;
800010da:	02000737          	lui	a4,0x2000
800010de:	6785                	lui	a5,0x1
800010e0:	97ba                	add	a5,a5,a4
800010e2:	ffc7a783          	lw	a5,-4(a5) # ffc <__stack_size+0x7fc>
800010e6:	020006b7          	lui	a3,0x2000
800010ea:	0017e713          	ori	a4,a5,1
800010ee:	6785                	lui	a5,0x1
800010f0:	97b6                	add	a5,a5,a3
800010f2:	fee7ae23          	sw	a4,-4(a5) # ffc <__stack_size+0x7fc>
}
800010f6:	0001                	nop
            SysTimer_SetSWIRQ(); /* trigger timer sw interrupt */
            wait_seconds(1);
800010f8:	4505                	li	a0,1
800010fa:	3b11                	jal	80000e0e <wait_seconds>
        }
    } while (int1_cnt < 10); /* check test end condition */
800010fc:	0ffff797          	auipc	a5,0xffff
80001100:	f9078793          	addi	a5,a5,-112 # 9000008c <int1_cnt>
80001104:	4398                	lw	a4,0(a5)
80001106:	47a5                	li	a5,9
80001108:	fae7fbe3          	bgeu	a5,a4,800010be <main+0x92>

    printf("MTimer msip and mtip interrupt test finish and pass\r\n");
8000110c:	00001517          	auipc	a0,0x1
80001110:	52050513          	addi	a0,a0,1312 # 8000262c <_read_r+0x158>
80001114:	241d                	jal	8000133a <puts>

    if (returnCode != 0) { /* Check return code for errors */
80001116:	fec42783          	lw	a5,-20(s0)
8000111a:	c399                	beqz	a5,80001120 <main+0xf4>
        return -1;
8000111c:	57fd                	li	a5,-1
8000111e:	a011                	j	80001122 <main+0xf6>
    }

    while (1);
80001120:	a001                	j	80001120 <main+0xf4>
    return 0;
}
80001122:	853e                	mv	a0,a5
80001124:	40f2                	lw	ra,28(sp)
80001126:	4462                	lw	s0,24(sp)
80001128:	6105                	addi	sp,sp,32
8000112a:	8082                	ret

8000112c <__fixunsdfdi>:
8000112c:	1141                	addi	sp,sp,-16
8000112e:	a42a                	fsd	fa0,8(sp)
80001130:	4622                	lw	a2,8(sp)
80001132:	46b2                	lw	a3,12(sp)
80001134:	0ffff797          	auipc	a5,0xffff
80001138:	f447b787          	fld	fa5,-188(a5) # 90000078 <_global_impure_ptr+0x8>
8000113c:	c432                	sw	a2,8(sp)
8000113e:	c636                	sw	a3,12(sp)
80001140:	2722                	fld	fa4,8(sp)
80001142:	0ffff797          	auipc	a5,0xffff
80001146:	f3e7b687          	fld	fa3,-194(a5) # 90000080 <_global_impure_ptr+0x10>
8000114a:	12f777d3          	fmul.d	fa5,fa4,fa5
8000114e:	0141                	addi	sp,sp,16
80001150:	c21795d3          	fcvt.wu.d	a1,fa5,rtz
80001154:	d21587d3          	fcvt.d.wu	fa5,a1
80001158:	72d7f74b          	fnmsub.d	fa4,fa5,fa3,fa4
8000115c:	c2171553          	fcvt.wu.d	a0,fa4,rtz
80001160:	8082                	ret

80001162 <__floatundidf>:
80001162:	d2158753          	fcvt.d.wu	fa4,a1
80001166:	d21507d3          	fcvt.d.wu	fa5,a0
8000116a:	0ffff797          	auipc	a5,0xffff
8000116e:	f167b507          	fld	fa0,-234(a5) # 90000080 <_global_impure_ptr+0x10>
80001172:	7aa77543          	fmadd.d	fa0,fa4,fa0,fa5
80001176:	8082                	ret

80001178 <atexit>:
80001178:	85aa                	mv	a1,a0
8000117a:	4681                	li	a3,0
8000117c:	4601                	li	a2,0
8000117e:	4501                	li	a0,0
80001180:	a671                	j	8000150c <__register_exitproc>

80001182 <__libc_fini_array>:
80001182:	1141                	addi	sp,sp,-16
80001184:	00001797          	auipc	a5,0x1
80001188:	5e078793          	addi	a5,a5,1504 # 80002764 <__fsymtab_end>
8000118c:	c422                	sw	s0,8(sp)
8000118e:	00001417          	auipc	s0,0x1
80001192:	5d640413          	addi	s0,s0,1494 # 80002764 <__fsymtab_end>
80001196:	8c1d                	sub	s0,s0,a5
80001198:	c226                	sw	s1,4(sp)
8000119a:	c606                	sw	ra,12(sp)
8000119c:	8409                	srai	s0,s0,0x2
8000119e:	84be                	mv	s1,a5
800011a0:	e411                	bnez	s0,800011ac <__libc_fini_array+0x2a>
800011a2:	4422                	lw	s0,8(sp)
800011a4:	40b2                	lw	ra,12(sp)
800011a6:	4492                	lw	s1,4(sp)
800011a8:	0141                	addi	sp,sp,16
800011aa:	b999                	j	80000e00 <_fini>
800011ac:	147d                	addi	s0,s0,-1
800011ae:	00241793          	slli	a5,s0,0x2
800011b2:	97a6                	add	a5,a5,s1
800011b4:	439c                	lw	a5,0(a5)
800011b6:	9782                	jalr	a5
800011b8:	b7e5                	j	800011a0 <__libc_fini_array+0x1e>

800011ba <__libc_init_array>:
800011ba:	1141                	addi	sp,sp,-16
800011bc:	00001797          	auipc	a5,0x1
800011c0:	5a878793          	addi	a5,a5,1448 # 80002764 <__fsymtab_end>
800011c4:	c422                	sw	s0,8(sp)
800011c6:	00001417          	auipc	s0,0x1
800011ca:	59e40413          	addi	s0,s0,1438 # 80002764 <__fsymtab_end>
800011ce:	8c1d                	sub	s0,s0,a5
800011d0:	c226                	sw	s1,4(sp)
800011d2:	c04a                	sw	s2,0(sp)
800011d4:	c606                	sw	ra,12(sp)
800011d6:	8409                	srai	s0,s0,0x2
800011d8:	4481                	li	s1,0
800011da:	893e                	mv	s2,a5
800011dc:	02849763          	bne	s1,s0,8000120a <__libc_init_array+0x50>
800011e0:	3909                	jal	80000df2 <_init>
800011e2:	00001797          	auipc	a5,0x1
800011e6:	58278793          	addi	a5,a5,1410 # 80002764 <__fsymtab_end>
800011ea:	00001417          	auipc	s0,0x1
800011ee:	57a40413          	addi	s0,s0,1402 # 80002764 <__fsymtab_end>
800011f2:	8c1d                	sub	s0,s0,a5
800011f4:	8409                	srai	s0,s0,0x2
800011f6:	4481                	li	s1,0
800011f8:	893e                	mv	s2,a5
800011fa:	00849f63          	bne	s1,s0,80001218 <__libc_init_array+0x5e>
800011fe:	40b2                	lw	ra,12(sp)
80001200:	4422                	lw	s0,8(sp)
80001202:	4492                	lw	s1,4(sp)
80001204:	4902                	lw	s2,0(sp)
80001206:	0141                	addi	sp,sp,16
80001208:	8082                	ret
8000120a:	00249793          	slli	a5,s1,0x2
8000120e:	97ca                	add	a5,a5,s2
80001210:	439c                	lw	a5,0(a5)
80001212:	0485                	addi	s1,s1,1
80001214:	9782                	jalr	a5
80001216:	b7d9                	j	800011dc <__libc_init_array+0x22>
80001218:	00249793          	slli	a5,s1,0x2
8000121c:	97ca                	add	a5,a5,s2
8000121e:	439c                	lw	a5,0(a5)
80001220:	0485                	addi	s1,s1,1
80001222:	9782                	jalr	a5
80001224:	bfd9                	j	800011fa <__libc_init_array+0x40>

80001226 <iprintf>:
80001226:	715d                	addi	sp,sp,-80
80001228:	d422                	sw	s0,40(sp)
8000122a:	d606                	sw	ra,44(sp)
8000122c:	842a                	mv	s0,a0
8000122e:	da2e                	sw	a1,52(sp)
80001230:	dc32                	sw	a2,56(sp)
80001232:	de36                	sw	a3,60(sp)
80001234:	c0ba                	sw	a4,64(sp)
80001236:	c2be                	sw	a5,68(sp)
80001238:	c4c2                	sw	a6,72(sp)
8000123a:	c6c6                	sw	a7,76(sp)
8000123c:	80c1a503          	lw	a0,-2036(gp) # 9000006c <_impure_ptr>
80001240:	c511                	beqz	a0,8000124c <iprintf+0x26>
80001242:	4d1c                	lw	a5,24(a0)
80001244:	e781                	bnez	a5,8000124c <iprintf+0x26>
80001246:	c62a                	sw	a0,12(sp)
80001248:	2355                	jal	800017ec <__sinit>
8000124a:	4532                	lw	a0,12(sp)
8000124c:	450c                	lw	a1,8(a0)
8000124e:	1854                	addi	a3,sp,52
80001250:	8622                	mv	a2,s0
80001252:	ce36                	sw	a3,28(sp)
80001254:	299000ef          	jal	ra,80001cec <_vfiprintf_r>
80001258:	50b2                	lw	ra,44(sp)
8000125a:	5422                	lw	s0,40(sp)
8000125c:	6161                	addi	sp,sp,80
8000125e:	8082                	ret

80001260 <_puts_r>:
80001260:	1101                	addi	sp,sp,-32
80001262:	ca26                	sw	s1,20(sp)
80001264:	c84a                	sw	s2,16(sp)
80001266:	ce06                	sw	ra,28(sp)
80001268:	cc22                	sw	s0,24(sp)
8000126a:	c64e                	sw	s3,12(sp)
8000126c:	c452                	sw	s4,8(sp)
8000126e:	84aa                	mv	s1,a0
80001270:	892e                	mv	s2,a1
80001272:	c501                	beqz	a0,8000127a <_puts_r+0x1a>
80001274:	4d1c                	lw	a5,24(a0)
80001276:	e391                	bnez	a5,8000127a <_puts_r+0x1a>
80001278:	2b95                	jal	800017ec <__sinit>
8000127a:	4c9c                	lw	a5,24(s1)
8000127c:	4480                	lw	s0,8(s1)
8000127e:	e399                	bnez	a5,80001284 <_puts_r+0x24>
80001280:	8526                	mv	a0,s1
80001282:	23ad                	jal	800017ec <__sinit>
80001284:	00001797          	auipc	a5,0x1
80001288:	40c78793          	addi	a5,a5,1036 # 80002690 <__sf_fake_stdin>
8000128c:	02f41c63          	bne	s0,a5,800012c4 <_puts_r+0x64>
80001290:	40c0                	lw	s0,4(s1)
80001292:	00c45783          	lhu	a5,12(s0)
80001296:	8ba1                	andi	a5,a5,8
80001298:	c7b1                	beqz	a5,800012e4 <_puts_r+0x84>
8000129a:	481c                	lw	a5,16(s0)
8000129c:	c7a1                	beqz	a5,800012e4 <_puts_r+0x84>
8000129e:	59fd                	li	s3,-1
800012a0:	4a29                	li	s4,10
800012a2:	441c                	lw	a5,8(s0)
800012a4:	00094583          	lbu	a1,0(s2)
800012a8:	17fd                	addi	a5,a5,-1
800012aa:	e9b1                	bnez	a1,800012fe <_puts_r+0x9e>
800012ac:	c41c                	sw	a5,8(s0)
800012ae:	0607de63          	bgez	a5,8000132a <_puts_r+0xca>
800012b2:	8622                	mv	a2,s0
800012b4:	45a9                	li	a1,10
800012b6:	8526                	mv	a0,s1
800012b8:	2079                	jal	80001346 <__swbuf_r>
800012ba:	57fd                	li	a5,-1
800012bc:	02f50863          	beq	a0,a5,800012ec <_puts_r+0x8c>
800012c0:	4529                	li	a0,10
800012c2:	a035                	j	800012ee <_puts_r+0x8e>
800012c4:	00001797          	auipc	a5,0x1
800012c8:	3ec78793          	addi	a5,a5,1004 # 800026b0 <__sf_fake_stdout>
800012cc:	00f41463          	bne	s0,a5,800012d4 <_puts_r+0x74>
800012d0:	4480                	lw	s0,8(s1)
800012d2:	b7c1                	j	80001292 <_puts_r+0x32>
800012d4:	00001797          	auipc	a5,0x1
800012d8:	39c78793          	addi	a5,a5,924 # 80002670 <__sf_fake_stderr>
800012dc:	faf41be3          	bne	s0,a5,80001292 <_puts_r+0x32>
800012e0:	44c0                	lw	s0,12(s1)
800012e2:	bf45                	j	80001292 <_puts_r+0x32>
800012e4:	85a2                	mv	a1,s0
800012e6:	8526                	mv	a0,s1
800012e8:	2a39                	jal	80001406 <__swsetup_r>
800012ea:	d955                	beqz	a0,8000129e <_puts_r+0x3e>
800012ec:	557d                	li	a0,-1
800012ee:	40f2                	lw	ra,28(sp)
800012f0:	4462                	lw	s0,24(sp)
800012f2:	44d2                	lw	s1,20(sp)
800012f4:	4942                	lw	s2,16(sp)
800012f6:	49b2                	lw	s3,12(sp)
800012f8:	4a22                	lw	s4,8(sp)
800012fa:	6105                	addi	sp,sp,32
800012fc:	8082                	ret
800012fe:	c41c                	sw	a5,8(s0)
80001300:	0905                	addi	s2,s2,1
80001302:	0007d763          	bgez	a5,80001310 <_puts_r+0xb0>
80001306:	4c18                	lw	a4,24(s0)
80001308:	00e7cb63          	blt	a5,a4,8000131e <_puts_r+0xbe>
8000130c:	01458963          	beq	a1,s4,8000131e <_puts_r+0xbe>
80001310:	401c                	lw	a5,0(s0)
80001312:	00178713          	addi	a4,a5,1
80001316:	c018                	sw	a4,0(s0)
80001318:	00b78023          	sb	a1,0(a5)
8000131c:	b759                	j	800012a2 <_puts_r+0x42>
8000131e:	8622                	mv	a2,s0
80001320:	8526                	mv	a0,s1
80001322:	2015                	jal	80001346 <__swbuf_r>
80001324:	f7351fe3          	bne	a0,s3,800012a2 <_puts_r+0x42>
80001328:	b7d1                	j	800012ec <_puts_r+0x8c>
8000132a:	401c                	lw	a5,0(s0)
8000132c:	00178713          	addi	a4,a5,1
80001330:	c018                	sw	a4,0(s0)
80001332:	4729                	li	a4,10
80001334:	00e78023          	sb	a4,0(a5)
80001338:	b761                	j	800012c0 <_puts_r+0x60>

8000133a <puts>:
8000133a:	85aa                	mv	a1,a0
8000133c:	80c1a503          	lw	a0,-2036(gp) # 9000006c <_impure_ptr>
80001340:	b705                	j	80001260 <_puts_r>

80001342 <isatty>:
80001342:	9b2ff06f          	j	800004f4 <_isatty>

80001346 <__swbuf_r>:
80001346:	1101                	addi	sp,sp,-32
80001348:	cc22                	sw	s0,24(sp)
8000134a:	ca26                	sw	s1,20(sp)
8000134c:	c84a                	sw	s2,16(sp)
8000134e:	ce06                	sw	ra,28(sp)
80001350:	c64e                	sw	s3,12(sp)
80001352:	84aa                	mv	s1,a0
80001354:	892e                	mv	s2,a1
80001356:	8432                	mv	s0,a2
80001358:	c501                	beqz	a0,80001360 <__swbuf_r+0x1a>
8000135a:	4d1c                	lw	a5,24(a0)
8000135c:	e391                	bnez	a5,80001360 <__swbuf_r+0x1a>
8000135e:	2179                	jal	800017ec <__sinit>
80001360:	00001797          	auipc	a5,0x1
80001364:	33078793          	addi	a5,a5,816 # 80002690 <__sf_fake_stdin>
80001368:	06f41963          	bne	s0,a5,800013da <__swbuf_r+0x94>
8000136c:	40c0                	lw	s0,4(s1)
8000136e:	4c1c                	lw	a5,24(s0)
80001370:	c41c                	sw	a5,8(s0)
80001372:	00c45783          	lhu	a5,12(s0)
80001376:	8ba1                	andi	a5,a5,8
80001378:	c3c9                	beqz	a5,800013fa <__swbuf_r+0xb4>
8000137a:	481c                	lw	a5,16(s0)
8000137c:	cfbd                	beqz	a5,800013fa <__swbuf_r+0xb4>
8000137e:	481c                	lw	a5,16(s0)
80001380:	4008                	lw	a0,0(s0)
80001382:	0ff97993          	andi	s3,s2,255
80001386:	0ff97913          	andi	s2,s2,255
8000138a:	8d1d                	sub	a0,a0,a5
8000138c:	485c                	lw	a5,20(s0)
8000138e:	00f54663          	blt	a0,a5,8000139a <__swbuf_r+0x54>
80001392:	85a2                	mv	a1,s0
80001394:	8526                	mv	a0,s1
80001396:	2e35                	jal	800016d2 <_fflush_r>
80001398:	e52d                	bnez	a0,80001402 <__swbuf_r+0xbc>
8000139a:	441c                	lw	a5,8(s0)
8000139c:	0505                	addi	a0,a0,1
8000139e:	17fd                	addi	a5,a5,-1
800013a0:	c41c                	sw	a5,8(s0)
800013a2:	401c                	lw	a5,0(s0)
800013a4:	00178713          	addi	a4,a5,1
800013a8:	c018                	sw	a4,0(s0)
800013aa:	01378023          	sb	s3,0(a5)
800013ae:	485c                	lw	a5,20(s0)
800013b0:	00a78963          	beq	a5,a0,800013c2 <__swbuf_r+0x7c>
800013b4:	00c45783          	lhu	a5,12(s0)
800013b8:	8b85                	andi	a5,a5,1
800013ba:	cb81                	beqz	a5,800013ca <__swbuf_r+0x84>
800013bc:	47a9                	li	a5,10
800013be:	00f91663          	bne	s2,a5,800013ca <__swbuf_r+0x84>
800013c2:	85a2                	mv	a1,s0
800013c4:	8526                	mv	a0,s1
800013c6:	2631                	jal	800016d2 <_fflush_r>
800013c8:	ed0d                	bnez	a0,80001402 <__swbuf_r+0xbc>
800013ca:	40f2                	lw	ra,28(sp)
800013cc:	4462                	lw	s0,24(sp)
800013ce:	44d2                	lw	s1,20(sp)
800013d0:	49b2                	lw	s3,12(sp)
800013d2:	854a                	mv	a0,s2
800013d4:	4942                	lw	s2,16(sp)
800013d6:	6105                	addi	sp,sp,32
800013d8:	8082                	ret
800013da:	00001797          	auipc	a5,0x1
800013de:	2d678793          	addi	a5,a5,726 # 800026b0 <__sf_fake_stdout>
800013e2:	00f41463          	bne	s0,a5,800013ea <__swbuf_r+0xa4>
800013e6:	4480                	lw	s0,8(s1)
800013e8:	b759                	j	8000136e <__swbuf_r+0x28>
800013ea:	00001797          	auipc	a5,0x1
800013ee:	28678793          	addi	a5,a5,646 # 80002670 <__sf_fake_stderr>
800013f2:	f6f41ee3          	bne	s0,a5,8000136e <__swbuf_r+0x28>
800013f6:	44c0                	lw	s0,12(s1)
800013f8:	bf9d                	j	8000136e <__swbuf_r+0x28>
800013fa:	85a2                	mv	a1,s0
800013fc:	8526                	mv	a0,s1
800013fe:	2021                	jal	80001406 <__swsetup_r>
80001400:	dd3d                	beqz	a0,8000137e <__swbuf_r+0x38>
80001402:	597d                	li	s2,-1
80001404:	b7d9                	j	800013ca <__swbuf_r+0x84>

80001406 <__swsetup_r>:
80001406:	1141                	addi	sp,sp,-16
80001408:	c422                	sw	s0,8(sp)
8000140a:	c226                	sw	s1,4(sp)
8000140c:	c04a                	sw	s2,0(sp)
8000140e:	c606                	sw	ra,12(sp)
80001410:	80c1a483          	lw	s1,-2036(gp) # 9000006c <_impure_ptr>
80001414:	892a                	mv	s2,a0
80001416:	842e                	mv	s0,a1
80001418:	c489                	beqz	s1,80001422 <__swsetup_r+0x1c>
8000141a:	4c9c                	lw	a5,24(s1)
8000141c:	e399                	bnez	a5,80001422 <__swsetup_r+0x1c>
8000141e:	8526                	mv	a0,s1
80001420:	26f1                	jal	800017ec <__sinit>
80001422:	00001797          	auipc	a5,0x1
80001426:	26e78793          	addi	a5,a5,622 # 80002690 <__sf_fake_stdin>
8000142a:	02f41763          	bne	s0,a5,80001458 <__swsetup_r+0x52>
8000142e:	40c0                	lw	s0,4(s1)
80001430:	00c41783          	lh	a5,12(s0)
80001434:	01079713          	slli	a4,a5,0x10
80001438:	0087f693          	andi	a3,a5,8
8000143c:	8341                	srli	a4,a4,0x10
8000143e:	eaad                	bnez	a3,800014b0 <__swsetup_r+0xaa>
80001440:	01077693          	andi	a3,a4,16
80001444:	ea95                	bnez	a3,80001478 <__swsetup_r+0x72>
80001446:	4725                	li	a4,9
80001448:	00e92023          	sw	a4,0(s2)
8000144c:	0407e793          	ori	a5,a5,64
80001450:	00f41623          	sh	a5,12(s0)
80001454:	557d                	li	a0,-1
80001456:	a871                	j	800014f2 <__swsetup_r+0xec>
80001458:	00001797          	auipc	a5,0x1
8000145c:	25878793          	addi	a5,a5,600 # 800026b0 <__sf_fake_stdout>
80001460:	00f41463          	bne	s0,a5,80001468 <__swsetup_r+0x62>
80001464:	4480                	lw	s0,8(s1)
80001466:	b7e9                	j	80001430 <__swsetup_r+0x2a>
80001468:	00001797          	auipc	a5,0x1
8000146c:	20878793          	addi	a5,a5,520 # 80002670 <__sf_fake_stderr>
80001470:	fcf410e3          	bne	s0,a5,80001430 <__swsetup_r+0x2a>
80001474:	44c0                	lw	s0,12(s1)
80001476:	bf6d                	j	80001430 <__swsetup_r+0x2a>
80001478:	8b11                	andi	a4,a4,4
8000147a:	c70d                	beqz	a4,800014a4 <__swsetup_r+0x9e>
8000147c:	584c                	lw	a1,52(s0)
8000147e:	c989                	beqz	a1,80001490 <__swsetup_r+0x8a>
80001480:	04440793          	addi	a5,s0,68
80001484:	00f58463          	beq	a1,a5,8000148c <__swsetup_r+0x86>
80001488:	854a                	mv	a0,s2
8000148a:	25b5                	jal	80001af6 <_free_r>
8000148c:	02042a23          	sw	zero,52(s0)
80001490:	00c45783          	lhu	a5,12(s0)
80001494:	00042223          	sw	zero,4(s0)
80001498:	fdb7f793          	andi	a5,a5,-37
8000149c:	00f41623          	sh	a5,12(s0)
800014a0:	481c                	lw	a5,16(s0)
800014a2:	c01c                	sw	a5,0(s0)
800014a4:	00c45783          	lhu	a5,12(s0)
800014a8:	0087e793          	ori	a5,a5,8
800014ac:	00f41623          	sh	a5,12(s0)
800014b0:	481c                	lw	a5,16(s0)
800014b2:	ef81                	bnez	a5,800014ca <__swsetup_r+0xc4>
800014b4:	00c45783          	lhu	a5,12(s0)
800014b8:	20000713          	li	a4,512
800014bc:	2807f793          	andi	a5,a5,640
800014c0:	00e78563          	beq	a5,a4,800014ca <__swsetup_r+0xc4>
800014c4:	85a2                	mv	a1,s0
800014c6:	854a                	mv	a0,s2
800014c8:	21e5                	jal	800019b0 <__smakebuf_r>
800014ca:	00c41783          	lh	a5,12(s0)
800014ce:	01079713          	slli	a4,a5,0x10
800014d2:	0017f693          	andi	a3,a5,1
800014d6:	8341                	srli	a4,a4,0x10
800014d8:	c29d                	beqz	a3,800014fe <__swsetup_r+0xf8>
800014da:	4854                	lw	a3,20(s0)
800014dc:	00042423          	sw	zero,8(s0)
800014e0:	40d006b3          	neg	a3,a3
800014e4:	cc14                	sw	a3,24(s0)
800014e6:	4814                	lw	a3,16(s0)
800014e8:	4501                	li	a0,0
800014ea:	e681                	bnez	a3,800014f2 <__swsetup_r+0xec>
800014ec:	08077713          	andi	a4,a4,128
800014f0:	ff31                	bnez	a4,8000144c <__swsetup_r+0x46>
800014f2:	40b2                	lw	ra,12(sp)
800014f4:	4422                	lw	s0,8(sp)
800014f6:	4492                	lw	s1,4(sp)
800014f8:	4902                	lw	s2,0(sp)
800014fa:	0141                	addi	sp,sp,16
800014fc:	8082                	ret
800014fe:	00277693          	andi	a3,a4,2
80001502:	4601                	li	a2,0
80001504:	e291                	bnez	a3,80001508 <__swsetup_r+0x102>
80001506:	4850                	lw	a2,20(s0)
80001508:	c410                	sw	a2,8(s0)
8000150a:	bff1                	j	800014e6 <__swsetup_r+0xe0>

8000150c <__register_exitproc>:
8000150c:	88aa                	mv	a7,a0
8000150e:	0ffff517          	auipc	a0,0xffff
80001512:	b8250513          	addi	a0,a0,-1150 # 90000090 <_global_atexit>
80001516:	411c                	lw	a5,0(a0)
80001518:	ef91                	bnez	a5,80001534 <__register_exitproc+0x28>
8000151a:	87018713          	addi	a4,gp,-1936 # 900000d0 <_global_atexit0>
8000151e:	c118                	sw	a4,0(a0)
80001520:	7ffff517          	auipc	a0,0x7ffff
80001524:	ae050513          	addi	a0,a0,-1312 # 0 <_sp+0x6fff0000>
80001528:	87ba                	mv	a5,a4
8000152a:	c509                	beqz	a0,80001534 <__register_exitproc+0x28>
8000152c:	411c                	lw	a5,0(a0)
8000152e:	08f72423          	sw	a5,136(a4) # 2000088 <__stack_size+0x1fff888>
80001532:	87ba                	mv	a5,a4
80001534:	43d8                	lw	a4,4(a5)
80001536:	487d                	li	a6,31
80001538:	557d                	li	a0,-1
8000153a:	04e84663          	blt	a6,a4,80001586 <__register_exitproc+0x7a>
8000153e:	02088d63          	beqz	a7,80001578 <__register_exitproc+0x6c>
80001542:	0887a803          	lw	a6,136(a5)
80001546:	04080063          	beqz	a6,80001586 <__register_exitproc+0x7a>
8000154a:	00271513          	slli	a0,a4,0x2
8000154e:	9542                	add	a0,a0,a6
80001550:	c110                	sw	a2,0(a0)
80001552:	10082303          	lw	t1,256(a6)
80001556:	4605                	li	a2,1
80001558:	00e61633          	sll	a2,a2,a4
8000155c:	00c36333          	or	t1,t1,a2
80001560:	10682023          	sw	t1,256(a6)
80001564:	08d52023          	sw	a3,128(a0)
80001568:	4689                	li	a3,2
8000156a:	00d89763          	bne	a7,a3,80001578 <__register_exitproc+0x6c>
8000156e:	10482683          	lw	a3,260(a6)
80001572:	8e55                	or	a2,a2,a3
80001574:	10c82223          	sw	a2,260(a6)
80001578:	00170693          	addi	a3,a4,1
8000157c:	070a                	slli	a4,a4,0x2
8000157e:	c3d4                	sw	a3,4(a5)
80001580:	97ba                	add	a5,a5,a4
80001582:	c78c                	sw	a1,8(a5)
80001584:	4501                	li	a0,0
80001586:	8082                	ret

80001588 <__sflush_r>:
80001588:	00c5d783          	lhu	a5,12(a1) # 3000c <__stack_size+0x2f80c>
8000158c:	1101                	addi	sp,sp,-32
8000158e:	cc22                	sw	s0,24(sp)
80001590:	ca26                	sw	s1,20(sp)
80001592:	ce06                	sw	ra,28(sp)
80001594:	c84a                	sw	s2,16(sp)
80001596:	c64e                	sw	s3,12(sp)
80001598:	0087f713          	andi	a4,a5,8
8000159c:	84aa                	mv	s1,a0
8000159e:	842e                	mv	s0,a1
800015a0:	e765                	bnez	a4,80001688 <__sflush_r+0x100>
800015a2:	41d8                	lw	a4,4(a1)
800015a4:	00e04763          	bgtz	a4,800015b2 <__sflush_r+0x2a>
800015a8:	41b8                	lw	a4,64(a1)
800015aa:	00e04463          	bgtz	a4,800015b2 <__sflush_r+0x2a>
800015ae:	4501                	li	a0,0
800015b0:	a0c1                	j	80001670 <__sflush_r+0xe8>
800015b2:	5458                	lw	a4,44(s0)
800015b4:	df6d                	beqz	a4,800015ae <__sflush_r+0x26>
800015b6:	0004a903          	lw	s2,0(s1)
800015ba:	01379693          	slli	a3,a5,0x13
800015be:	0004a023          	sw	zero,0(s1)
800015c2:	0606de63          	bgez	a3,8000163e <__sflush_r+0xb6>
800015c6:	4868                	lw	a0,84(s0)
800015c8:	00c45783          	lhu	a5,12(s0)
800015cc:	8b91                	andi	a5,a5,4
800015ce:	c799                	beqz	a5,800015dc <__sflush_r+0x54>
800015d0:	405c                	lw	a5,4(s0)
800015d2:	8d1d                	sub	a0,a0,a5
800015d4:	585c                	lw	a5,52(s0)
800015d6:	c399                	beqz	a5,800015dc <__sflush_r+0x54>
800015d8:	403c                	lw	a5,64(s0)
800015da:	8d1d                	sub	a0,a0,a5
800015dc:	545c                	lw	a5,44(s0)
800015de:	500c                	lw	a1,32(s0)
800015e0:	862a                	mv	a2,a0
800015e2:	4681                	li	a3,0
800015e4:	8526                	mv	a0,s1
800015e6:	9782                	jalr	a5
800015e8:	57fd                	li	a5,-1
800015ea:	00c45703          	lhu	a4,12(s0)
800015ee:	00f51d63          	bne	a0,a5,80001608 <__sflush_r+0x80>
800015f2:	4094                	lw	a3,0(s1)
800015f4:	47f5                	li	a5,29
800015f6:	08d7e463          	bltu	a5,a3,8000167e <__sflush_r+0xf6>
800015fa:	204007b7          	lui	a5,0x20400
800015fe:	0785                	addi	a5,a5,1
80001600:	00d7d7b3          	srl	a5,a5,a3
80001604:	8b85                	andi	a5,a5,1
80001606:	cfa5                	beqz	a5,8000167e <__sflush_r+0xf6>
80001608:	481c                	lw	a5,16(s0)
8000160a:	00042223          	sw	zero,4(s0)
8000160e:	c01c                	sw	a5,0(s0)
80001610:	01371793          	slli	a5,a4,0x13
80001614:	0007d863          	bgez	a5,80001624 <__sflush_r+0x9c>
80001618:	57fd                	li	a5,-1
8000161a:	00f51463          	bne	a0,a5,80001622 <__sflush_r+0x9a>
8000161e:	409c                	lw	a5,0(s1)
80001620:	e391                	bnez	a5,80001624 <__sflush_r+0x9c>
80001622:	c868                	sw	a0,84(s0)
80001624:	584c                	lw	a1,52(s0)
80001626:	0124a023          	sw	s2,0(s1)
8000162a:	d1d1                	beqz	a1,800015ae <__sflush_r+0x26>
8000162c:	04440793          	addi	a5,s0,68
80001630:	00f58463          	beq	a1,a5,80001638 <__sflush_r+0xb0>
80001634:	8526                	mv	a0,s1
80001636:	21c1                	jal	80001af6 <_free_r>
80001638:	02042a23          	sw	zero,52(s0)
8000163c:	bf8d                	j	800015ae <__sflush_r+0x26>
8000163e:	500c                	lw	a1,32(s0)
80001640:	4685                	li	a3,1
80001642:	4601                	li	a2,0
80001644:	8526                	mv	a0,s1
80001646:	9702                	jalr	a4
80001648:	57fd                	li	a5,-1
8000164a:	f6f51fe3          	bne	a0,a5,800015c8 <__sflush_r+0x40>
8000164e:	409c                	lw	a5,0(s1)
80001650:	dfa5                	beqz	a5,800015c8 <__sflush_r+0x40>
80001652:	4775                	li	a4,29
80001654:	00e78563          	beq	a5,a4,8000165e <__sflush_r+0xd6>
80001658:	4759                	li	a4,22
8000165a:	00e79563          	bne	a5,a4,80001664 <__sflush_r+0xdc>
8000165e:	0124a023          	sw	s2,0(s1)
80001662:	b7b1                	j	800015ae <__sflush_r+0x26>
80001664:	00c45783          	lhu	a5,12(s0)
80001668:	0407e793          	ori	a5,a5,64
8000166c:	00f41623          	sh	a5,12(s0)
80001670:	40f2                	lw	ra,28(sp)
80001672:	4462                	lw	s0,24(sp)
80001674:	44d2                	lw	s1,20(sp)
80001676:	4942                	lw	s2,16(sp)
80001678:	49b2                	lw	s3,12(sp)
8000167a:	6105                	addi	sp,sp,32
8000167c:	8082                	ret
8000167e:	04076713          	ori	a4,a4,64
80001682:	00e41623          	sh	a4,12(s0)
80001686:	b7ed                	j	80001670 <__sflush_r+0xe8>
80001688:	0105a983          	lw	s3,16(a1)
8000168c:	f20981e3          	beqz	s3,800015ae <__sflush_r+0x26>
80001690:	0005a903          	lw	s2,0(a1)
80001694:	8b8d                	andi	a5,a5,3
80001696:	0135a023          	sw	s3,0(a1)
8000169a:	41390933          	sub	s2,s2,s3
8000169e:	4701                	li	a4,0
800016a0:	e391                	bnez	a5,800016a4 <__sflush_r+0x11c>
800016a2:	49d8                	lw	a4,20(a1)
800016a4:	c418                	sw	a4,8(s0)
800016a6:	f12054e3          	blez	s2,800015ae <__sflush_r+0x26>
800016aa:	541c                	lw	a5,40(s0)
800016ac:	500c                	lw	a1,32(s0)
800016ae:	86ca                	mv	a3,s2
800016b0:	864e                	mv	a2,s3
800016b2:	8526                	mv	a0,s1
800016b4:	9782                	jalr	a5
800016b6:	00a04a63          	bgtz	a0,800016ca <__sflush_r+0x142>
800016ba:	00c45783          	lhu	a5,12(s0)
800016be:	557d                	li	a0,-1
800016c0:	0407e793          	ori	a5,a5,64
800016c4:	00f41623          	sh	a5,12(s0)
800016c8:	b765                	j	80001670 <__sflush_r+0xe8>
800016ca:	99aa                	add	s3,s3,a0
800016cc:	40a90933          	sub	s2,s2,a0
800016d0:	bfd9                	j	800016a6 <__sflush_r+0x11e>

800016d2 <_fflush_r>:
800016d2:	499c                	lw	a5,16(a1)
800016d4:	cfb9                	beqz	a5,80001732 <_fflush_r+0x60>
800016d6:	1101                	addi	sp,sp,-32
800016d8:	cc22                	sw	s0,24(sp)
800016da:	ce06                	sw	ra,28(sp)
800016dc:	842a                	mv	s0,a0
800016de:	c511                	beqz	a0,800016ea <_fflush_r+0x18>
800016e0:	4d1c                	lw	a5,24(a0)
800016e2:	e781                	bnez	a5,800016ea <_fflush_r+0x18>
800016e4:	c62e                	sw	a1,12(sp)
800016e6:	2219                	jal	800017ec <__sinit>
800016e8:	45b2                	lw	a1,12(sp)
800016ea:	00001797          	auipc	a5,0x1
800016ee:	fa678793          	addi	a5,a5,-90 # 80002690 <__sf_fake_stdin>
800016f2:	00f59b63          	bne	a1,a5,80001708 <_fflush_r+0x36>
800016f6:	404c                	lw	a1,4(s0)
800016f8:	00c59783          	lh	a5,12(a1)
800016fc:	c795                	beqz	a5,80001728 <_fflush_r+0x56>
800016fe:	8522                	mv	a0,s0
80001700:	4462                	lw	s0,24(sp)
80001702:	40f2                	lw	ra,28(sp)
80001704:	6105                	addi	sp,sp,32
80001706:	b549                	j	80001588 <__sflush_r>
80001708:	00001797          	auipc	a5,0x1
8000170c:	fa878793          	addi	a5,a5,-88 # 800026b0 <__sf_fake_stdout>
80001710:	00f59463          	bne	a1,a5,80001718 <_fflush_r+0x46>
80001714:	440c                	lw	a1,8(s0)
80001716:	b7cd                	j	800016f8 <_fflush_r+0x26>
80001718:	00001797          	auipc	a5,0x1
8000171c:	f5878793          	addi	a5,a5,-168 # 80002670 <__sf_fake_stderr>
80001720:	fcf59ce3          	bne	a1,a5,800016f8 <_fflush_r+0x26>
80001724:	444c                	lw	a1,12(s0)
80001726:	bfc9                	j	800016f8 <_fflush_r+0x26>
80001728:	40f2                	lw	ra,28(sp)
8000172a:	4462                	lw	s0,24(sp)
8000172c:	4501                	li	a0,0
8000172e:	6105                	addi	sp,sp,32
80001730:	8082                	ret
80001732:	4501                	li	a0,0
80001734:	8082                	ret

80001736 <std>:
80001736:	1141                	addi	sp,sp,-16
80001738:	c422                	sw	s0,8(sp)
8000173a:	c606                	sw	ra,12(sp)
8000173c:	842a                	mv	s0,a0
8000173e:	00b51623          	sh	a1,12(a0)
80001742:	00c51723          	sh	a2,14(a0)
80001746:	00052023          	sw	zero,0(a0)
8000174a:	00052223          	sw	zero,4(a0)
8000174e:	00052423          	sw	zero,8(a0)
80001752:	06052223          	sw	zero,100(a0)
80001756:	00052823          	sw	zero,16(a0)
8000175a:	00052a23          	sw	zero,20(a0)
8000175e:	00052c23          	sw	zero,24(a0)
80001762:	4621                	li	a2,8
80001764:	4581                	li	a1,0
80001766:	05c50513          	addi	a0,a0,92
8000176a:	24d5                	jal	80001a4e <memset>
8000176c:	00001797          	auipc	a5,0x1
80001770:	bbe78793          	addi	a5,a5,-1090 # 8000232a <__sread>
80001774:	d05c                	sw	a5,36(s0)
80001776:	00001797          	auipc	a5,0x1
8000177a:	be478793          	addi	a5,a5,-1052 # 8000235a <__swrite>
8000177e:	d41c                	sw	a5,40(s0)
80001780:	00001797          	auipc	a5,0x1
80001784:	c2878793          	addi	a5,a5,-984 # 800023a8 <__sseek>
80001788:	d45c                	sw	a5,44(s0)
8000178a:	00001797          	auipc	a5,0x1
8000178e:	c5478793          	addi	a5,a5,-940 # 800023de <__sclose>
80001792:	40b2                	lw	ra,12(sp)
80001794:	d000                	sw	s0,32(s0)
80001796:	d81c                	sw	a5,48(s0)
80001798:	4422                	lw	s0,8(sp)
8000179a:	0141                	addi	sp,sp,16
8000179c:	8082                	ret

8000179e <_cleanup_r>:
8000179e:	00000597          	auipc	a1,0x0
800017a2:	f3458593          	addi	a1,a1,-204 # 800016d2 <_fflush_r>
800017a6:	a291                	j	800018ea <_fwalk_reent>

800017a8 <__sfmoreglue>:
800017a8:	1141                	addi	sp,sp,-16
800017aa:	c226                	sw	s1,4(sp)
800017ac:	06800613          	li	a2,104
800017b0:	fff58493          	addi	s1,a1,-1
800017b4:	02c484b3          	mul	s1,s1,a2
800017b8:	c04a                	sw	s2,0(sp)
800017ba:	892e                	mv	s2,a1
800017bc:	c422                	sw	s0,8(sp)
800017be:	c606                	sw	ra,12(sp)
800017c0:	07448593          	addi	a1,s1,116
800017c4:	2ef1                	jal	80001ba0 <_malloc_r>
800017c6:	842a                	mv	s0,a0
800017c8:	c919                	beqz	a0,800017de <__sfmoreglue+0x36>
800017ca:	00052023          	sw	zero,0(a0)
800017ce:	01252223          	sw	s2,4(a0)
800017d2:	0531                	addi	a0,a0,12
800017d4:	c408                	sw	a0,8(s0)
800017d6:	06848613          	addi	a2,s1,104
800017da:	4581                	li	a1,0
800017dc:	2c8d                	jal	80001a4e <memset>
800017de:	40b2                	lw	ra,12(sp)
800017e0:	8522                	mv	a0,s0
800017e2:	4422                	lw	s0,8(sp)
800017e4:	4492                	lw	s1,4(sp)
800017e6:	4902                	lw	s2,0(sp)
800017e8:	0141                	addi	sp,sp,16
800017ea:	8082                	ret

800017ec <__sinit>:
800017ec:	4d1c                	lw	a5,24(a0)
800017ee:	e3ad                	bnez	a5,80001850 <__sinit+0x64>
800017f0:	1141                	addi	sp,sp,-16
800017f2:	c422                	sw	s0,8(sp)
800017f4:	c606                	sw	ra,12(sp)
800017f6:	00000797          	auipc	a5,0x0
800017fa:	fa878793          	addi	a5,a5,-88 # 8000179e <_cleanup_r>
800017fe:	d51c                	sw	a5,40(a0)
80001800:	04052423          	sw	zero,72(a0)
80001804:	04052623          	sw	zero,76(a0)
80001808:	04052823          	sw	zero,80(a0)
8000180c:	8101a783          	lw	a5,-2032(gp) # 90000070 <_global_impure_ptr>
80001810:	842a                	mv	s0,a0
80001812:	00f51463          	bne	a0,a5,8000181a <__sinit+0x2e>
80001816:	4785                	li	a5,1
80001818:	cd1c                	sw	a5,24(a0)
8000181a:	8522                	mv	a0,s0
8000181c:	281d                	jal	80001852 <__sfp>
8000181e:	c048                	sw	a0,4(s0)
80001820:	8522                	mv	a0,s0
80001822:	2805                	jal	80001852 <__sfp>
80001824:	c408                	sw	a0,8(s0)
80001826:	8522                	mv	a0,s0
80001828:	202d                	jal	80001852 <__sfp>
8000182a:	c448                	sw	a0,12(s0)
8000182c:	4048                	lw	a0,4(s0)
8000182e:	4601                	li	a2,0
80001830:	4591                	li	a1,4
80001832:	3711                	jal	80001736 <std>
80001834:	4408                	lw	a0,8(s0)
80001836:	4605                	li	a2,1
80001838:	45a5                	li	a1,9
8000183a:	3df5                	jal	80001736 <std>
8000183c:	4448                	lw	a0,12(s0)
8000183e:	4609                	li	a2,2
80001840:	45c9                	li	a1,18
80001842:	3dd5                	jal	80001736 <std>
80001844:	4785                	li	a5,1
80001846:	40b2                	lw	ra,12(sp)
80001848:	cc1c                	sw	a5,24(s0)
8000184a:	4422                	lw	s0,8(sp)
8000184c:	0141                	addi	sp,sp,16
8000184e:	8082                	ret
80001850:	8082                	ret

80001852 <__sfp>:
80001852:	1141                	addi	sp,sp,-16
80001854:	c226                	sw	s1,4(sp)
80001856:	8101a483          	lw	s1,-2032(gp) # 90000070 <_global_impure_ptr>
8000185a:	4c9c                	lw	a5,24(s1)
8000185c:	c04a                	sw	s2,0(sp)
8000185e:	c606                	sw	ra,12(sp)
80001860:	c422                	sw	s0,8(sp)
80001862:	892a                	mv	s2,a0
80001864:	e399                	bnez	a5,8000186a <__sfp+0x18>
80001866:	8526                	mv	a0,s1
80001868:	3751                	jal	800017ec <__sinit>
8000186a:	04848493          	addi	s1,s1,72
8000186e:	4480                	lw	s0,8(s1)
80001870:	40dc                	lw	a5,4(s1)
80001872:	17fd                	addi	a5,a5,-1
80001874:	0007d663          	bgez	a5,80001880 <__sfp+0x2e>
80001878:	409c                	lw	a5,0(s1)
8000187a:	cfb1                	beqz	a5,800018d6 <__sfp+0x84>
8000187c:	4084                	lw	s1,0(s1)
8000187e:	bfc5                	j	8000186e <__sfp+0x1c>
80001880:	00c41703          	lh	a4,12(s0)
80001884:	e731                	bnez	a4,800018d0 <__sfp+0x7e>
80001886:	77c1                	lui	a5,0xffff0
80001888:	0785                	addi	a5,a5,1
8000188a:	06042223          	sw	zero,100(s0)
8000188e:	00042023          	sw	zero,0(s0)
80001892:	00042223          	sw	zero,4(s0)
80001896:	00042423          	sw	zero,8(s0)
8000189a:	c45c                	sw	a5,12(s0)
8000189c:	00042823          	sw	zero,16(s0)
800018a0:	00042a23          	sw	zero,20(s0)
800018a4:	00042c23          	sw	zero,24(s0)
800018a8:	4621                	li	a2,8
800018aa:	4581                	li	a1,0
800018ac:	05c40513          	addi	a0,s0,92
800018b0:	2a79                	jal	80001a4e <memset>
800018b2:	02042a23          	sw	zero,52(s0)
800018b6:	02042c23          	sw	zero,56(s0)
800018ba:	04042423          	sw	zero,72(s0)
800018be:	04042623          	sw	zero,76(s0)
800018c2:	40b2                	lw	ra,12(sp)
800018c4:	8522                	mv	a0,s0
800018c6:	4422                	lw	s0,8(sp)
800018c8:	4492                	lw	s1,4(sp)
800018ca:	4902                	lw	s2,0(sp)
800018cc:	0141                	addi	sp,sp,16
800018ce:	8082                	ret
800018d0:	06840413          	addi	s0,s0,104
800018d4:	bf79                	j	80001872 <__sfp+0x20>
800018d6:	4591                	li	a1,4
800018d8:	854a                	mv	a0,s2
800018da:	35f9                	jal	800017a8 <__sfmoreglue>
800018dc:	c088                	sw	a0,0(s1)
800018de:	842a                	mv	s0,a0
800018e0:	fd51                	bnez	a0,8000187c <__sfp+0x2a>
800018e2:	47b1                	li	a5,12
800018e4:	00f92023          	sw	a5,0(s2)
800018e8:	bfe9                	j	800018c2 <__sfp+0x70>

800018ea <_fwalk_reent>:
800018ea:	7179                	addi	sp,sp,-48
800018ec:	d422                	sw	s0,40(sp)
800018ee:	d04a                	sw	s2,32(sp)
800018f0:	ce4e                	sw	s3,28(sp)
800018f2:	cc52                	sw	s4,24(sp)
800018f4:	c85a                	sw	s6,16(sp)
800018f6:	c65e                	sw	s7,12(sp)
800018f8:	d606                	sw	ra,44(sp)
800018fa:	d226                	sw	s1,36(sp)
800018fc:	ca56                	sw	s5,20(sp)
800018fe:	892a                	mv	s2,a0
80001900:	8a2e                	mv	s4,a1
80001902:	04850413          	addi	s0,a0,72
80001906:	4981                	li	s3,0
80001908:	4b05                	li	s6,1
8000190a:	5bfd                	li	s7,-1
8000190c:	4404                	lw	s1,8(s0)
8000190e:	00442a83          	lw	s5,4(s0)
80001912:	1afd                	addi	s5,s5,-1
80001914:	020ad063          	bgez	s5,80001934 <_fwalk_reent+0x4a>
80001918:	4000                	lw	s0,0(s0)
8000191a:	f86d                	bnez	s0,8000190c <_fwalk_reent+0x22>
8000191c:	50b2                	lw	ra,44(sp)
8000191e:	5422                	lw	s0,40(sp)
80001920:	5492                	lw	s1,36(sp)
80001922:	5902                	lw	s2,32(sp)
80001924:	4a62                	lw	s4,24(sp)
80001926:	4ad2                	lw	s5,20(sp)
80001928:	4b42                	lw	s6,16(sp)
8000192a:	4bb2                	lw	s7,12(sp)
8000192c:	854e                	mv	a0,s3
8000192e:	49f2                	lw	s3,28(sp)
80001930:	6145                	addi	sp,sp,48
80001932:	8082                	ret
80001934:	00c4d783          	lhu	a5,12(s1)
80001938:	00fb7b63          	bgeu	s6,a5,8000194e <_fwalk_reent+0x64>
8000193c:	00e49783          	lh	a5,14(s1)
80001940:	01778763          	beq	a5,s7,8000194e <_fwalk_reent+0x64>
80001944:	85a6                	mv	a1,s1
80001946:	854a                	mv	a0,s2
80001948:	9a02                	jalr	s4
8000194a:	00a9e9b3          	or	s3,s3,a0
8000194e:	06848493          	addi	s1,s1,104
80001952:	b7c1                	j	80001912 <_fwalk_reent+0x28>

80001954 <__swhatbuf_r>:
80001954:	7159                	addi	sp,sp,-112
80001956:	d0ca                	sw	s2,96(sp)
80001958:	892e                	mv	s2,a1
8000195a:	00e59583          	lh	a1,14(a1)
8000195e:	d4a2                	sw	s0,104(sp)
80001960:	d2a6                	sw	s1,100(sp)
80001962:	d686                	sw	ra,108(sp)
80001964:	8432                	mv	s0,a2
80001966:	84b6                	mv	s1,a3
80001968:	0005dc63          	bgez	a1,80001980 <__swhatbuf_r+0x2c>
8000196c:	00c95783          	lhu	a5,12(s2)
80001970:	0004a023          	sw	zero,0(s1)
80001974:	0807f793          	andi	a5,a5,128
80001978:	e395                	bnez	a5,8000199c <__swhatbuf_r+0x48>
8000197a:	40000793          	li	a5,1024
8000197e:	a00d                	j	800019a0 <__swhatbuf_r+0x4c>
80001980:	0030                	addi	a2,sp,8
80001982:	2b7000ef          	jal	ra,80002438 <_fstat_r>
80001986:	fe0543e3          	bltz	a0,8000196c <__swhatbuf_r+0x18>
8000198a:	4732                	lw	a4,12(sp)
8000198c:	67bd                	lui	a5,0xf
8000198e:	8ff9                	and	a5,a5,a4
80001990:	7779                	lui	a4,0xffffe
80001992:	97ba                	add	a5,a5,a4
80001994:	0017b793          	seqz	a5,a5
80001998:	c09c                	sw	a5,0(s1)
8000199a:	b7c5                	j	8000197a <__swhatbuf_r+0x26>
8000199c:	04000793          	li	a5,64
800019a0:	50b6                	lw	ra,108(sp)
800019a2:	c01c                	sw	a5,0(s0)
800019a4:	5426                	lw	s0,104(sp)
800019a6:	5496                	lw	s1,100(sp)
800019a8:	5906                	lw	s2,96(sp)
800019aa:	4501                	li	a0,0
800019ac:	6165                	addi	sp,sp,112
800019ae:	8082                	ret

800019b0 <__smakebuf_r>:
800019b0:	00c5d783          	lhu	a5,12(a1)
800019b4:	1101                	addi	sp,sp,-32
800019b6:	cc22                	sw	s0,24(sp)
800019b8:	ce06                	sw	ra,28(sp)
800019ba:	ca26                	sw	s1,20(sp)
800019bc:	c84a                	sw	s2,16(sp)
800019be:	8b89                	andi	a5,a5,2
800019c0:	842e                	mv	s0,a1
800019c2:	cf89                	beqz	a5,800019dc <__smakebuf_r+0x2c>
800019c4:	04740793          	addi	a5,s0,71
800019c8:	c01c                	sw	a5,0(s0)
800019ca:	c81c                	sw	a5,16(s0)
800019cc:	4785                	li	a5,1
800019ce:	c85c                	sw	a5,20(s0)
800019d0:	40f2                	lw	ra,28(sp)
800019d2:	4462                	lw	s0,24(sp)
800019d4:	44d2                	lw	s1,20(sp)
800019d6:	4942                	lw	s2,16(sp)
800019d8:	6105                	addi	sp,sp,32
800019da:	8082                	ret
800019dc:	0074                	addi	a3,sp,12
800019de:	0030                	addi	a2,sp,8
800019e0:	892a                	mv	s2,a0
800019e2:	3f8d                	jal	80001954 <__swhatbuf_r>
800019e4:	45a2                	lw	a1,8(sp)
800019e6:	84aa                	mv	s1,a0
800019e8:	854a                	mv	a0,s2
800019ea:	2a5d                	jal	80001ba0 <_malloc_r>
800019ec:	ed01                	bnez	a0,80001a04 <__smakebuf_r+0x54>
800019ee:	00c41783          	lh	a5,12(s0)
800019f2:	2007f713          	andi	a4,a5,512
800019f6:	ff69                	bnez	a4,800019d0 <__smakebuf_r+0x20>
800019f8:	9bf1                	andi	a5,a5,-4
800019fa:	0027e793          	ori	a5,a5,2
800019fe:	00f41623          	sh	a5,12(s0)
80001a02:	b7c9                	j	800019c4 <__smakebuf_r+0x14>
80001a04:	00000797          	auipc	a5,0x0
80001a08:	d9a78793          	addi	a5,a5,-614 # 8000179e <_cleanup_r>
80001a0c:	02f92423          	sw	a5,40(s2)
80001a10:	00c45783          	lhu	a5,12(s0)
80001a14:	c008                	sw	a0,0(s0)
80001a16:	c808                	sw	a0,16(s0)
80001a18:	0807e793          	ori	a5,a5,128
80001a1c:	00f41623          	sh	a5,12(s0)
80001a20:	47a2                	lw	a5,8(sp)
80001a22:	c85c                	sw	a5,20(s0)
80001a24:	47b2                	lw	a5,12(sp)
80001a26:	cf91                	beqz	a5,80001a42 <__smakebuf_r+0x92>
80001a28:	00e41583          	lh	a1,14(s0)
80001a2c:	854a                	mv	a0,s2
80001a2e:	235000ef          	jal	ra,80002462 <_isatty_r>
80001a32:	c901                	beqz	a0,80001a42 <__smakebuf_r+0x92>
80001a34:	00c45783          	lhu	a5,12(s0)
80001a38:	9bf1                	andi	a5,a5,-4
80001a3a:	0017e793          	ori	a5,a5,1
80001a3e:	00f41623          	sh	a5,12(s0)
80001a42:	00c45503          	lhu	a0,12(s0)
80001a46:	8cc9                	or	s1,s1,a0
80001a48:	00941623          	sh	s1,12(s0)
80001a4c:	b751                	j	800019d0 <__smakebuf_r+0x20>

80001a4e <memset>:
80001a4e:	433d                	li	t1,15
80001a50:	872a                	mv	a4,a0
80001a52:	02c37363          	bgeu	t1,a2,80001a78 <memset+0x2a>
80001a56:	00f77793          	andi	a5,a4,15
80001a5a:	efbd                	bnez	a5,80001ad8 <memset+0x8a>
80001a5c:	e5ad                	bnez	a1,80001ac6 <memset+0x78>
80001a5e:	ff067693          	andi	a3,a2,-16
80001a62:	8a3d                	andi	a2,a2,15
80001a64:	96ba                	add	a3,a3,a4
80001a66:	c30c                	sw	a1,0(a4)
80001a68:	c34c                	sw	a1,4(a4)
80001a6a:	c70c                	sw	a1,8(a4)
80001a6c:	c74c                	sw	a1,12(a4)
80001a6e:	0741                	addi	a4,a4,16
80001a70:	fed76be3          	bltu	a4,a3,80001a66 <memset+0x18>
80001a74:	e211                	bnez	a2,80001a78 <memset+0x2a>
80001a76:	8082                	ret
80001a78:	40c306b3          	sub	a3,t1,a2
80001a7c:	068a                	slli	a3,a3,0x2
80001a7e:	00000297          	auipc	t0,0x0
80001a82:	9696                	add	a3,a3,t0
80001a84:	00a68067          	jr	10(a3) # 200000a <__stack_size+0x1fff80a>
80001a88:	00b70723          	sb	a1,14(a4) # ffffe00e <_sp+0x6ffee00e>
80001a8c:	00b706a3          	sb	a1,13(a4)
80001a90:	00b70623          	sb	a1,12(a4)
80001a94:	00b705a3          	sb	a1,11(a4)
80001a98:	00b70523          	sb	a1,10(a4)
80001a9c:	00b704a3          	sb	a1,9(a4)
80001aa0:	00b70423          	sb	a1,8(a4)
80001aa4:	00b703a3          	sb	a1,7(a4)
80001aa8:	00b70323          	sb	a1,6(a4)
80001aac:	00b702a3          	sb	a1,5(a4)
80001ab0:	00b70223          	sb	a1,4(a4)
80001ab4:	00b701a3          	sb	a1,3(a4)
80001ab8:	00b70123          	sb	a1,2(a4)
80001abc:	00b700a3          	sb	a1,1(a4)
80001ac0:	00b70023          	sb	a1,0(a4)
80001ac4:	8082                	ret
80001ac6:	0ff5f593          	andi	a1,a1,255
80001aca:	00859693          	slli	a3,a1,0x8
80001ace:	8dd5                	or	a1,a1,a3
80001ad0:	01059693          	slli	a3,a1,0x10
80001ad4:	8dd5                	or	a1,a1,a3
80001ad6:	b761                	j	80001a5e <memset+0x10>
80001ad8:	00279693          	slli	a3,a5,0x2
80001adc:	00000297          	auipc	t0,0x0
80001ae0:	9696                	add	a3,a3,t0
80001ae2:	8286                	mv	t0,ra
80001ae4:	fa8680e7          	jalr	-88(a3)
80001ae8:	8096                	mv	ra,t0
80001aea:	17c1                	addi	a5,a5,-16
80001aec:	8f1d                	sub	a4,a4,a5
80001aee:	963e                	add	a2,a2,a5
80001af0:	f8c374e3          	bgeu	t1,a2,80001a78 <memset+0x2a>
80001af4:	b7a5                	j	80001a5c <memset+0xe>

80001af6 <_free_r>:
80001af6:	c5c5                	beqz	a1,80001b9e <_free_r+0xa8>
80001af8:	ffc5a783          	lw	a5,-4(a1)
80001afc:	1101                	addi	sp,sp,-32
80001afe:	cc22                	sw	s0,24(sp)
80001b00:	ce06                	sw	ra,28(sp)
80001b02:	ffc58413          	addi	s0,a1,-4
80001b06:	0007d363          	bgez	a5,80001b0c <_free_r+0x16>
80001b0a:	943e                	add	s0,s0,a5
80001b0c:	c62a                	sw	a0,12(sp)
80001b0e:	1c3000ef          	jal	ra,800024d0 <__malloc_lock>
80001b12:	0fffe717          	auipc	a4,0xfffe
80001b16:	58270713          	addi	a4,a4,1410 # 90000094 <__malloc_free_list>
80001b1a:	431c                	lw	a5,0(a4)
80001b1c:	4532                	lw	a0,12(sp)
80001b1e:	863a                	mv	a2,a4
80001b20:	eb89                	bnez	a5,80001b32 <_free_r+0x3c>
80001b22:	00042223          	sw	zero,4(s0)
80001b26:	c300                	sw	s0,0(a4)
80001b28:	4462                	lw	s0,24(sp)
80001b2a:	40f2                	lw	ra,28(sp)
80001b2c:	6105                	addi	sp,sp,32
80001b2e:	1a50006f          	j	800024d2 <__malloc_unlock>
80001b32:	00f47e63          	bgeu	s0,a5,80001b4e <_free_r+0x58>
80001b36:	4014                	lw	a3,0(s0)
80001b38:	00d40733          	add	a4,s0,a3
80001b3c:	00e79663          	bne	a5,a4,80001b48 <_free_r+0x52>
80001b40:	4398                	lw	a4,0(a5)
80001b42:	43dc                	lw	a5,4(a5)
80001b44:	9736                	add	a4,a4,a3
80001b46:	c018                	sw	a4,0(s0)
80001b48:	c05c                	sw	a5,4(s0)
80001b4a:	c200                	sw	s0,0(a2)
80001b4c:	bff1                	j	80001b28 <_free_r+0x32>
80001b4e:	873e                	mv	a4,a5
80001b50:	43dc                	lw	a5,4(a5)
80001b52:	c399                	beqz	a5,80001b58 <_free_r+0x62>
80001b54:	fef47de3          	bgeu	s0,a5,80001b4e <_free_r+0x58>
80001b58:	4314                	lw	a3,0(a4)
80001b5a:	00d70633          	add	a2,a4,a3
80001b5e:	00861f63          	bne	a2,s0,80001b7c <_free_r+0x86>
80001b62:	4010                	lw	a2,0(s0)
80001b64:	96b2                	add	a3,a3,a2
80001b66:	c314                	sw	a3,0(a4)
80001b68:	00d70633          	add	a2,a4,a3
80001b6c:	fac79ee3          	bne	a5,a2,80001b28 <_free_r+0x32>
80001b70:	4390                	lw	a2,0(a5)
80001b72:	43dc                	lw	a5,4(a5)
80001b74:	96b2                	add	a3,a3,a2
80001b76:	c314                	sw	a3,0(a4)
80001b78:	c35c                	sw	a5,4(a4)
80001b7a:	b77d                	j	80001b28 <_free_r+0x32>
80001b7c:	00c47563          	bgeu	s0,a2,80001b86 <_free_r+0x90>
80001b80:	47b1                	li	a5,12
80001b82:	c11c                	sw	a5,0(a0)
80001b84:	b755                	j	80001b28 <_free_r+0x32>
80001b86:	4010                	lw	a2,0(s0)
80001b88:	00c406b3          	add	a3,s0,a2
80001b8c:	00d79663          	bne	a5,a3,80001b98 <_free_r+0xa2>
80001b90:	4394                	lw	a3,0(a5)
80001b92:	43dc                	lw	a5,4(a5)
80001b94:	96b2                	add	a3,a3,a2
80001b96:	c014                	sw	a3,0(s0)
80001b98:	c05c                	sw	a5,4(s0)
80001b9a:	c340                	sw	s0,4(a4)
80001b9c:	b771                	j	80001b28 <_free_r+0x32>
80001b9e:	8082                	ret

80001ba0 <_malloc_r>:
80001ba0:	1101                	addi	sp,sp,-32
80001ba2:	ca26                	sw	s1,20(sp)
80001ba4:	00358493          	addi	s1,a1,3
80001ba8:	98f1                	andi	s1,s1,-4
80001baa:	c84a                	sw	s2,16(sp)
80001bac:	ce06                	sw	ra,28(sp)
80001bae:	cc22                	sw	s0,24(sp)
80001bb0:	c64e                	sw	s3,12(sp)
80001bb2:	04a1                	addi	s1,s1,8
80001bb4:	47b1                	li	a5,12
80001bb6:	892a                	mv	s2,a0
80001bb8:	04f4f763          	bgeu	s1,a5,80001c06 <_malloc_r+0x66>
80001bbc:	44b1                	li	s1,12
80001bbe:	04b4e663          	bltu	s1,a1,80001c0a <_malloc_r+0x6a>
80001bc2:	854a                	mv	a0,s2
80001bc4:	10d000ef          	jal	ra,800024d0 <__malloc_lock>
80001bc8:	0fffe797          	auipc	a5,0xfffe
80001bcc:	4cc78793          	addi	a5,a5,1228 # 90000094 <__malloc_free_list>
80001bd0:	4398                	lw	a4,0(a5)
80001bd2:	86be                	mv	a3,a5
80001bd4:	843a                	mv	s0,a4
80001bd6:	e429                	bnez	s0,80001c20 <_malloc_r+0x80>
80001bd8:	0fffe417          	auipc	s0,0xfffe
80001bdc:	4c040413          	addi	s0,s0,1216 # 90000098 <__malloc_sbrk_start>
80001be0:	401c                	lw	a5,0(s0)
80001be2:	e789                	bnez	a5,80001bec <_malloc_r+0x4c>
80001be4:	4581                	li	a1,0
80001be6:	854a                	mv	a0,s2
80001be8:	2f29                	jal	80002302 <_sbrk_r>
80001bea:	c008                	sw	a0,0(s0)
80001bec:	85a6                	mv	a1,s1
80001bee:	854a                	mv	a0,s2
80001bf0:	2f09                	jal	80002302 <_sbrk_r>
80001bf2:	59fd                	li	s3,-1
80001bf4:	07351a63          	bne	a0,s3,80001c68 <_malloc_r+0xc8>
80001bf8:	47b1                	li	a5,12
80001bfa:	00f92023          	sw	a5,0(s2)
80001bfe:	854a                	mv	a0,s2
80001c00:	0d3000ef          	jal	ra,800024d2 <__malloc_unlock>
80001c04:	a031                	j	80001c10 <_malloc_r+0x70>
80001c06:	fa04dce3          	bgez	s1,80001bbe <_malloc_r+0x1e>
80001c0a:	47b1                	li	a5,12
80001c0c:	00f92023          	sw	a5,0(s2)
80001c10:	4501                	li	a0,0
80001c12:	40f2                	lw	ra,28(sp)
80001c14:	4462                	lw	s0,24(sp)
80001c16:	44d2                	lw	s1,20(sp)
80001c18:	4942                	lw	s2,16(sp)
80001c1a:	49b2                	lw	s3,12(sp)
80001c1c:	6105                	addi	sp,sp,32
80001c1e:	8082                	ret
80001c20:	401c                	lw	a5,0(s0)
80001c22:	8f85                	sub	a5,a5,s1
80001c24:	0207cf63          	bltz	a5,80001c62 <_malloc_r+0xc2>
80001c28:	462d                	li	a2,11
80001c2a:	00f67663          	bgeu	a2,a5,80001c36 <_malloc_r+0x96>
80001c2e:	c01c                	sw	a5,0(s0)
80001c30:	943e                	add	s0,s0,a5
80001c32:	c004                	sw	s1,0(s0)
80001c34:	a029                	j	80001c3e <_malloc_r+0x9e>
80001c36:	405c                	lw	a5,4(s0)
80001c38:	02871363          	bne	a4,s0,80001c5e <_malloc_r+0xbe>
80001c3c:	c29c                	sw	a5,0(a3)
80001c3e:	854a                	mv	a0,s2
80001c40:	093000ef          	jal	ra,800024d2 <__malloc_unlock>
80001c44:	00b40513          	addi	a0,s0,11
80001c48:	00440793          	addi	a5,s0,4
80001c4c:	9961                	andi	a0,a0,-8
80001c4e:	40f50733          	sub	a4,a0,a5
80001c52:	fcf500e3          	beq	a0,a5,80001c12 <_malloc_r+0x72>
80001c56:	943a                	add	s0,s0,a4
80001c58:	8f89                	sub	a5,a5,a0
80001c5a:	c01c                	sw	a5,0(s0)
80001c5c:	bf5d                	j	80001c12 <_malloc_r+0x72>
80001c5e:	c35c                	sw	a5,4(a4)
80001c60:	bff9                	j	80001c3e <_malloc_r+0x9e>
80001c62:	8722                	mv	a4,s0
80001c64:	4040                	lw	s0,4(s0)
80001c66:	bf85                	j	80001bd6 <_malloc_r+0x36>
80001c68:	00350413          	addi	s0,a0,3
80001c6c:	9871                	andi	s0,s0,-4
80001c6e:	fc8502e3          	beq	a0,s0,80001c32 <_malloc_r+0x92>
80001c72:	40a405b3          	sub	a1,s0,a0
80001c76:	854a                	mv	a0,s2
80001c78:	2569                	jal	80002302 <_sbrk_r>
80001c7a:	fb351ce3          	bne	a0,s3,80001c32 <_malloc_r+0x92>
80001c7e:	bfad                	j	80001bf8 <_malloc_r+0x58>

80001c80 <__sfputc_r>:
80001c80:	461c                	lw	a5,8(a2)
80001c82:	17fd                	addi	a5,a5,-1
80001c84:	c61c                	sw	a5,8(a2)
80001c86:	0007da63          	bgez	a5,80001c9a <__sfputc_r+0x1a>
80001c8a:	4e18                	lw	a4,24(a2)
80001c8c:	00e7c563          	blt	a5,a4,80001c96 <__sfputc_r+0x16>
80001c90:	47a9                	li	a5,10
80001c92:	00f59463          	bne	a1,a5,80001c9a <__sfputc_r+0x1a>
80001c96:	eb0ff06f          	j	80001346 <__swbuf_r>
80001c9a:	421c                	lw	a5,0(a2)
80001c9c:	852e                	mv	a0,a1
80001c9e:	00178713          	addi	a4,a5,1
80001ca2:	c218                	sw	a4,0(a2)
80001ca4:	00b78023          	sb	a1,0(a5)
80001ca8:	8082                	ret

80001caa <__sfputs_r>:
80001caa:	1101                	addi	sp,sp,-32
80001cac:	cc22                	sw	s0,24(sp)
80001cae:	ca26                	sw	s1,20(sp)
80001cb0:	c84a                	sw	s2,16(sp)
80001cb2:	c64e                	sw	s3,12(sp)
80001cb4:	c452                	sw	s4,8(sp)
80001cb6:	ce06                	sw	ra,28(sp)
80001cb8:	892a                	mv	s2,a0
80001cba:	89ae                	mv	s3,a1
80001cbc:	8432                	mv	s0,a2
80001cbe:	00d604b3          	add	s1,a2,a3
80001cc2:	5a7d                	li	s4,-1
80001cc4:	00941463          	bne	s0,s1,80001ccc <__sfputs_r+0x22>
80001cc8:	4501                	li	a0,0
80001cca:	a809                	j	80001cdc <__sfputs_r+0x32>
80001ccc:	00044583          	lbu	a1,0(s0)
80001cd0:	864e                	mv	a2,s3
80001cd2:	854a                	mv	a0,s2
80001cd4:	3775                	jal	80001c80 <__sfputc_r>
80001cd6:	0405                	addi	s0,s0,1
80001cd8:	ff4516e3          	bne	a0,s4,80001cc4 <__sfputs_r+0x1a>
80001cdc:	40f2                	lw	ra,28(sp)
80001cde:	4462                	lw	s0,24(sp)
80001ce0:	44d2                	lw	s1,20(sp)
80001ce2:	4942                	lw	s2,16(sp)
80001ce4:	49b2                	lw	s3,12(sp)
80001ce6:	4a22                	lw	s4,8(sp)
80001ce8:	6105                	addi	sp,sp,32
80001cea:	8082                	ret

80001cec <_vfiprintf_r>:
80001cec:	7135                	addi	sp,sp,-160
80001cee:	cd22                	sw	s0,152(sp)
80001cf0:	cb26                	sw	s1,148(sp)
80001cf2:	c94a                	sw	s2,144(sp)
80001cf4:	c74e                	sw	s3,140(sp)
80001cf6:	cf06                	sw	ra,156(sp)
80001cf8:	c552                	sw	s4,136(sp)
80001cfa:	c356                	sw	s5,132(sp)
80001cfc:	c15a                	sw	s6,128(sp)
80001cfe:	dede                	sw	s7,124(sp)
80001d00:	dce2                	sw	s8,120(sp)
80001d02:	dae6                	sw	s9,116(sp)
80001d04:	89aa                	mv	s3,a0
80001d06:	84ae                	mv	s1,a1
80001d08:	8932                	mv	s2,a2
80001d0a:	8436                	mv	s0,a3
80001d0c:	c501                	beqz	a0,80001d14 <_vfiprintf_r+0x28>
80001d0e:	4d1c                	lw	a5,24(a0)
80001d10:	e391                	bnez	a5,80001d14 <_vfiprintf_r+0x28>
80001d12:	3ce9                	jal	800017ec <__sinit>
80001d14:	00001797          	auipc	a5,0x1
80001d18:	97c78793          	addi	a5,a5,-1668 # 80002690 <__sf_fake_stdin>
80001d1c:	0cf49b63          	bne	s1,a5,80001df2 <_vfiprintf_r+0x106>
80001d20:	0049a483          	lw	s1,4(s3)
80001d24:	00c4d783          	lhu	a5,12(s1)
80001d28:	8ba1                	andi	a5,a5,8
80001d2a:	c7f5                	beqz	a5,80001e16 <_vfiprintf_r+0x12a>
80001d2c:	489c                	lw	a5,16(s1)
80001d2e:	c7e5                	beqz	a5,80001e16 <_vfiprintf_r+0x12a>
80001d30:	02000793          	li	a5,32
80001d34:	02f104a3          	sb	a5,41(sp)
80001d38:	03000793          	li	a5,48
80001d3c:	d202                	sw	zero,36(sp)
80001d3e:	02f10523          	sb	a5,42(sp)
80001d42:	c622                	sw	s0,12(sp)
80001d44:	02500b93          	li	s7,37
80001d48:	00001a97          	auipc	s5,0x1
80001d4c:	988a8a93          	addi	s5,s5,-1656 # 800026d0 <__sf_fake_stdout+0x20>
80001d50:	4c05                	li	s8,1
80001d52:	4b29                	li	s6,10
80001d54:	844a                	mv	s0,s2
80001d56:	00044783          	lbu	a5,0(s0)
80001d5a:	c399                	beqz	a5,80001d60 <_vfiprintf_r+0x74>
80001d5c:	0f779063          	bne	a5,s7,80001e3c <_vfiprintf_r+0x150>
80001d60:	41240cb3          	sub	s9,s0,s2
80001d64:	01240d63          	beq	s0,s2,80001d7e <_vfiprintf_r+0x92>
80001d68:	86e6                	mv	a3,s9
80001d6a:	864a                	mv	a2,s2
80001d6c:	85a6                	mv	a1,s1
80001d6e:	854e                	mv	a0,s3
80001d70:	3f2d                	jal	80001caa <__sfputs_r>
80001d72:	57fd                	li	a5,-1
80001d74:	1ef50663          	beq	a0,a5,80001f60 <_vfiprintf_r+0x274>
80001d78:	5792                	lw	a5,36(sp)
80001d7a:	97e6                	add	a5,a5,s9
80001d7c:	d23e                	sw	a5,36(sp)
80001d7e:	00044783          	lbu	a5,0(s0)
80001d82:	1c078f63          	beqz	a5,80001f60 <_vfiprintf_r+0x274>
80001d86:	57fd                	li	a5,-1
80001d88:	00140913          	addi	s2,s0,1
80001d8c:	c802                	sw	zero,16(sp)
80001d8e:	ce02                	sw	zero,28(sp)
80001d90:	ca3e                	sw	a5,20(sp)
80001d92:	cc02                	sw	zero,24(sp)
80001d94:	040109a3          	sb	zero,83(sp)
80001d98:	d482                	sw	zero,104(sp)
80001d9a:	00094583          	lbu	a1,0(s2)
80001d9e:	4615                	li	a2,5
80001da0:	8556                	mv	a0,s5
80001da2:	2f11                	jal	800024b6 <memchr>
80001da4:	47c2                	lw	a5,16(sp)
80001da6:	00190413          	addi	s0,s2,1
80001daa:	e959                	bnez	a0,80001e40 <_vfiprintf_r+0x154>
80001dac:	0107f713          	andi	a4,a5,16
80001db0:	c709                	beqz	a4,80001dba <_vfiprintf_r+0xce>
80001db2:	02000713          	li	a4,32
80001db6:	04e109a3          	sb	a4,83(sp)
80001dba:	0087f713          	andi	a4,a5,8
80001dbe:	c709                	beqz	a4,80001dc8 <_vfiprintf_r+0xdc>
80001dc0:	02b00713          	li	a4,43
80001dc4:	04e109a3          	sb	a4,83(sp)
80001dc8:	00094683          	lbu	a3,0(s2)
80001dcc:	02a00713          	li	a4,42
80001dd0:	08e68063          	beq	a3,a4,80001e50 <_vfiprintf_r+0x164>
80001dd4:	47f2                	lw	a5,28(sp)
80001dd6:	844a                	mv	s0,s2
80001dd8:	4681                	li	a3,0
80001dda:	4625                	li	a2,9
80001ddc:	00044703          	lbu	a4,0(s0)
80001de0:	00140593          	addi	a1,s0,1
80001de4:	fd070713          	addi	a4,a4,-48
80001de8:	0ae67963          	bgeu	a2,a4,80001e9a <_vfiprintf_r+0x1ae>
80001dec:	cab5                	beqz	a3,80001e60 <_vfiprintf_r+0x174>
80001dee:	ce3e                	sw	a5,28(sp)
80001df0:	a885                	j	80001e60 <_vfiprintf_r+0x174>
80001df2:	00001797          	auipc	a5,0x1
80001df6:	8be78793          	addi	a5,a5,-1858 # 800026b0 <__sf_fake_stdout>
80001dfa:	00f49563          	bne	s1,a5,80001e04 <_vfiprintf_r+0x118>
80001dfe:	0089a483          	lw	s1,8(s3)
80001e02:	b70d                	j	80001d24 <_vfiprintf_r+0x38>
80001e04:	00001797          	auipc	a5,0x1
80001e08:	86c78793          	addi	a5,a5,-1940 # 80002670 <__sf_fake_stderr>
80001e0c:	f0f49ce3          	bne	s1,a5,80001d24 <_vfiprintf_r+0x38>
80001e10:	00c9a483          	lw	s1,12(s3)
80001e14:	bf01                	j	80001d24 <_vfiprintf_r+0x38>
80001e16:	85a6                	mv	a1,s1
80001e18:	854e                	mv	a0,s3
80001e1a:	decff0ef          	jal	ra,80001406 <__swsetup_r>
80001e1e:	d909                	beqz	a0,80001d30 <_vfiprintf_r+0x44>
80001e20:	557d                	li	a0,-1
80001e22:	40fa                	lw	ra,156(sp)
80001e24:	446a                	lw	s0,152(sp)
80001e26:	44da                	lw	s1,148(sp)
80001e28:	494a                	lw	s2,144(sp)
80001e2a:	49ba                	lw	s3,140(sp)
80001e2c:	4a2a                	lw	s4,136(sp)
80001e2e:	4a9a                	lw	s5,132(sp)
80001e30:	4b0a                	lw	s6,128(sp)
80001e32:	5bf6                	lw	s7,124(sp)
80001e34:	5c66                	lw	s8,120(sp)
80001e36:	5cd6                	lw	s9,116(sp)
80001e38:	610d                	addi	sp,sp,160
80001e3a:	8082                	ret
80001e3c:	0405                	addi	s0,s0,1
80001e3e:	bf21                	j	80001d56 <_vfiprintf_r+0x6a>
80001e40:	41550533          	sub	a0,a0,s5
80001e44:	00ac1533          	sll	a0,s8,a0
80001e48:	8fc9                	or	a5,a5,a0
80001e4a:	c83e                	sw	a5,16(sp)
80001e4c:	8922                	mv	s2,s0
80001e4e:	b7b1                	j	80001d9a <_vfiprintf_r+0xae>
80001e50:	4732                	lw	a4,12(sp)
80001e52:	00470693          	addi	a3,a4,4
80001e56:	4318                	lw	a4,0(a4)
80001e58:	c636                	sw	a3,12(sp)
80001e5a:	02074963          	bltz	a4,80001e8c <_vfiprintf_r+0x1a0>
80001e5e:	ce3a                	sw	a4,28(sp)
80001e60:	00044703          	lbu	a4,0(s0)
80001e64:	02e00793          	li	a5,46
80001e68:	04f71f63          	bne	a4,a5,80001ec6 <_vfiprintf_r+0x1da>
80001e6c:	00144703          	lbu	a4,1(s0)
80001e70:	02a00793          	li	a5,42
80001e74:	02f71b63          	bne	a4,a5,80001eaa <_vfiprintf_r+0x1be>
80001e78:	47b2                	lw	a5,12(sp)
80001e7a:	0409                	addi	s0,s0,2
80001e7c:	00478713          	addi	a4,a5,4
80001e80:	439c                	lw	a5,0(a5)
80001e82:	c63a                	sw	a4,12(sp)
80001e84:	0207c163          	bltz	a5,80001ea6 <_vfiprintf_r+0x1ba>
80001e88:	ca3e                	sw	a5,20(sp)
80001e8a:	a835                	j	80001ec6 <_vfiprintf_r+0x1da>
80001e8c:	40e00733          	neg	a4,a4
80001e90:	0027e793          	ori	a5,a5,2
80001e94:	ce3a                	sw	a4,28(sp)
80001e96:	c83e                	sw	a5,16(sp)
80001e98:	b7e1                	j	80001e60 <_vfiprintf_r+0x174>
80001e9a:	036787b3          	mul	a5,a5,s6
80001e9e:	842e                	mv	s0,a1
80001ea0:	4685                	li	a3,1
80001ea2:	97ba                	add	a5,a5,a4
80001ea4:	bf25                	j	80001ddc <_vfiprintf_r+0xf0>
80001ea6:	57fd                	li	a5,-1
80001ea8:	b7c5                	j	80001e88 <_vfiprintf_r+0x19c>
80001eaa:	0405                	addi	s0,s0,1
80001eac:	ca02                	sw	zero,20(sp)
80001eae:	4681                	li	a3,0
80001eb0:	4781                	li	a5,0
80001eb2:	4625                	li	a2,9
80001eb4:	00044703          	lbu	a4,0(s0)
80001eb8:	00140593          	addi	a1,s0,1
80001ebc:	fd070713          	addi	a4,a4,-48
80001ec0:	06e67663          	bgeu	a2,a4,80001f2c <_vfiprintf_r+0x240>
80001ec4:	f2f1                	bnez	a3,80001e88 <_vfiprintf_r+0x19c>
80001ec6:	00044583          	lbu	a1,0(s0)
80001eca:	460d                	li	a2,3
80001ecc:	00001517          	auipc	a0,0x1
80001ed0:	80c50513          	addi	a0,a0,-2036 # 800026d8 <__sf_fake_stdout+0x28>
80001ed4:	23cd                	jal	800024b6 <memchr>
80001ed6:	cd11                	beqz	a0,80001ef2 <_vfiprintf_r+0x206>
80001ed8:	00001797          	auipc	a5,0x1
80001edc:	80078793          	addi	a5,a5,-2048 # 800026d8 <__sf_fake_stdout+0x28>
80001ee0:	8d1d                	sub	a0,a0,a5
80001ee2:	04000793          	li	a5,64
80001ee6:	00a797b3          	sll	a5,a5,a0
80001eea:	4542                	lw	a0,16(sp)
80001eec:	0405                	addi	s0,s0,1
80001eee:	8d5d                	or	a0,a0,a5
80001ef0:	c82a                	sw	a0,16(sp)
80001ef2:	00044583          	lbu	a1,0(s0)
80001ef6:	4619                	li	a2,6
80001ef8:	00000517          	auipc	a0,0x0
80001efc:	7e450513          	addi	a0,a0,2020 # 800026dc <__sf_fake_stdout+0x2c>
80001f00:	00140913          	addi	s2,s0,1
80001f04:	02b10423          	sb	a1,40(sp)
80001f08:	237d                	jal	800024b6 <memchr>
80001f0a:	c13d                	beqz	a0,80001f70 <_vfiprintf_r+0x284>
80001f0c:	7fffe797          	auipc	a5,0x7fffe
80001f10:	0f478793          	addi	a5,a5,244 # 0 <_sp+0x6fff0000>
80001f14:	e795                	bnez	a5,80001f40 <_vfiprintf_r+0x254>
80001f16:	4742                	lw	a4,16(sp)
80001f18:	47b2                	lw	a5,12(sp)
80001f1a:	10077713          	andi	a4,a4,256
80001f1e:	cf09                	beqz	a4,80001f38 <_vfiprintf_r+0x24c>
80001f20:	0791                	addi	a5,a5,4
80001f22:	c63e                	sw	a5,12(sp)
80001f24:	5792                	lw	a5,36(sp)
80001f26:	97d2                	add	a5,a5,s4
80001f28:	d23e                	sw	a5,36(sp)
80001f2a:	b52d                	j	80001d54 <_vfiprintf_r+0x68>
80001f2c:	036787b3          	mul	a5,a5,s6
80001f30:	842e                	mv	s0,a1
80001f32:	4685                	li	a3,1
80001f34:	97ba                	add	a5,a5,a4
80001f36:	bfbd                	j	80001eb4 <_vfiprintf_r+0x1c8>
80001f38:	079d                	addi	a5,a5,7
80001f3a:	9be1                	andi	a5,a5,-8
80001f3c:	07a1                	addi	a5,a5,8
80001f3e:	b7d5                	j	80001f22 <_vfiprintf_r+0x236>
80001f40:	0078                	addi	a4,sp,12
80001f42:	00000697          	auipc	a3,0x0
80001f46:	d6868693          	addi	a3,a3,-664 # 80001caa <__sfputs_r>
80001f4a:	8626                	mv	a2,s1
80001f4c:	080c                	addi	a1,sp,16
80001f4e:	854e                	mv	a0,s3
80001f50:	00000097          	auipc	ra,0x0
80001f54:	000000e7          	jalr	zero # 0 <__stack_size-0x800>
80001f58:	57fd                	li	a5,-1
80001f5a:	8a2a                	mv	s4,a0
80001f5c:	fcf514e3          	bne	a0,a5,80001f24 <_vfiprintf_r+0x238>
80001f60:	00c4d783          	lhu	a5,12(s1)
80001f64:	0407f793          	andi	a5,a5,64
80001f68:	ea079ce3          	bnez	a5,80001e20 <_vfiprintf_r+0x134>
80001f6c:	5512                	lw	a0,36(sp)
80001f6e:	bd55                	j	80001e22 <_vfiprintf_r+0x136>
80001f70:	0078                	addi	a4,sp,12
80001f72:	00000697          	auipc	a3,0x0
80001f76:	d3868693          	addi	a3,a3,-712 # 80001caa <__sfputs_r>
80001f7a:	8626                	mv	a2,s1
80001f7c:	080c                	addi	a1,sp,16
80001f7e:	854e                	mv	a0,s3
80001f80:	2a01                	jal	80002090 <_printf_i>
80001f82:	bfd9                	j	80001f58 <_vfiprintf_r+0x26c>

80001f84 <_printf_common>:
80001f84:	7179                	addi	sp,sp,-48
80001f86:	cc52                	sw	s4,24(sp)
80001f88:	499c                	lw	a5,16(a1)
80001f8a:	8a3a                	mv	s4,a4
80001f8c:	4598                	lw	a4,8(a1)
80001f8e:	d422                	sw	s0,40(sp)
80001f90:	d226                	sw	s1,36(sp)
80001f92:	ce4e                	sw	s3,28(sp)
80001f94:	ca56                	sw	s5,20(sp)
80001f96:	d606                	sw	ra,44(sp)
80001f98:	d04a                	sw	s2,32(sp)
80001f9a:	c85a                	sw	s6,16(sp)
80001f9c:	c65e                	sw	s7,12(sp)
80001f9e:	89aa                	mv	s3,a0
80001fa0:	842e                	mv	s0,a1
80001fa2:	84b2                	mv	s1,a2
80001fa4:	8ab6                	mv	s5,a3
80001fa6:	00e7d363          	bge	a5,a4,80001fac <_printf_common+0x28>
80001faa:	87ba                	mv	a5,a4
80001fac:	c09c                	sw	a5,0(s1)
80001fae:	04344703          	lbu	a4,67(s0)
80001fb2:	c319                	beqz	a4,80001fb8 <_printf_common+0x34>
80001fb4:	0785                	addi	a5,a5,1
80001fb6:	c09c                	sw	a5,0(s1)
80001fb8:	401c                	lw	a5,0(s0)
80001fba:	0207f793          	andi	a5,a5,32
80001fbe:	c781                	beqz	a5,80001fc6 <_printf_common+0x42>
80001fc0:	409c                	lw	a5,0(s1)
80001fc2:	0789                	addi	a5,a5,2
80001fc4:	c09c                	sw	a5,0(s1)
80001fc6:	00042903          	lw	s2,0(s0)
80001fca:	00697913          	andi	s2,s2,6
80001fce:	00091a63          	bnez	s2,80001fe2 <_printf_common+0x5e>
80001fd2:	01940b13          	addi	s6,s0,25
80001fd6:	5bfd                	li	s7,-1
80001fd8:	445c                	lw	a5,12(s0)
80001fda:	4098                	lw	a4,0(s1)
80001fdc:	8f99                	sub	a5,a5,a4
80001fde:	04f94c63          	blt	s2,a5,80002036 <_printf_common+0xb2>
80001fe2:	04344783          	lbu	a5,67(s0)
80001fe6:	00f036b3          	snez	a3,a5
80001fea:	401c                	lw	a5,0(s0)
80001fec:	0207f793          	andi	a5,a5,32
80001ff0:	eba5                	bnez	a5,80002060 <_printf_common+0xdc>
80001ff2:	04340613          	addi	a2,s0,67
80001ff6:	85d6                	mv	a1,s5
80001ff8:	854e                	mv	a0,s3
80001ffa:	9a02                	jalr	s4
80001ffc:	57fd                	li	a5,-1
80001ffe:	04f50363          	beq	a0,a5,80002044 <_printf_common+0xc0>
80002002:	401c                	lw	a5,0(s0)
80002004:	4611                	li	a2,4
80002006:	4098                	lw	a4,0(s1)
80002008:	8b99                	andi	a5,a5,6
8000200a:	4454                	lw	a3,12(s0)
8000200c:	4481                	li	s1,0
8000200e:	00c79763          	bne	a5,a2,8000201c <_printf_common+0x98>
80002012:	40e684b3          	sub	s1,a3,a4
80002016:	0004d363          	bgez	s1,8000201c <_printf_common+0x98>
8000201a:	4481                	li	s1,0
8000201c:	441c                	lw	a5,8(s0)
8000201e:	4818                	lw	a4,16(s0)
80002020:	00f75463          	bge	a4,a5,80002028 <_printf_common+0xa4>
80002024:	8f99                	sub	a5,a5,a4
80002026:	94be                	add	s1,s1,a5
80002028:	4901                	li	s2,0
8000202a:	0469                	addi	s0,s0,26
8000202c:	5b7d                	li	s6,-1
8000202e:	05249863          	bne	s1,s2,8000207e <_printf_common+0xfa>
80002032:	4501                	li	a0,0
80002034:	a809                	j	80002046 <_printf_common+0xc2>
80002036:	4685                	li	a3,1
80002038:	865a                	mv	a2,s6
8000203a:	85d6                	mv	a1,s5
8000203c:	854e                	mv	a0,s3
8000203e:	9a02                	jalr	s4
80002040:	01751e63          	bne	a0,s7,8000205c <_printf_common+0xd8>
80002044:	557d                	li	a0,-1
80002046:	50b2                	lw	ra,44(sp)
80002048:	5422                	lw	s0,40(sp)
8000204a:	5492                	lw	s1,36(sp)
8000204c:	5902                	lw	s2,32(sp)
8000204e:	49f2                	lw	s3,28(sp)
80002050:	4a62                	lw	s4,24(sp)
80002052:	4ad2                	lw	s5,20(sp)
80002054:	4b42                	lw	s6,16(sp)
80002056:	4bb2                	lw	s7,12(sp)
80002058:	6145                	addi	sp,sp,48
8000205a:	8082                	ret
8000205c:	0905                	addi	s2,s2,1
8000205e:	bfad                	j	80001fd8 <_printf_common+0x54>
80002060:	00d40733          	add	a4,s0,a3
80002064:	03000613          	li	a2,48
80002068:	04c701a3          	sb	a2,67(a4)
8000206c:	04544703          	lbu	a4,69(s0)
80002070:	00168793          	addi	a5,a3,1
80002074:	97a2                	add	a5,a5,s0
80002076:	0689                	addi	a3,a3,2
80002078:	04e781a3          	sb	a4,67(a5)
8000207c:	bf9d                	j	80001ff2 <_printf_common+0x6e>
8000207e:	4685                	li	a3,1
80002080:	8622                	mv	a2,s0
80002082:	85d6                	mv	a1,s5
80002084:	854e                	mv	a0,s3
80002086:	9a02                	jalr	s4
80002088:	fb650ee3          	beq	a0,s6,80002044 <_printf_common+0xc0>
8000208c:	0905                	addi	s2,s2,1
8000208e:	b745                	j	8000202e <_printf_common+0xaa>

80002090 <_printf_i>:
80002090:	7179                	addi	sp,sp,-48
80002092:	d422                	sw	s0,40(sp)
80002094:	d226                	sw	s1,36(sp)
80002096:	d04a                	sw	s2,32(sp)
80002098:	ce4e                	sw	s3,28(sp)
8000209a:	d606                	sw	ra,44(sp)
8000209c:	cc52                	sw	s4,24(sp)
8000209e:	ca56                	sw	s5,20(sp)
800020a0:	c85a                	sw	s6,16(sp)
800020a2:	842e                	mv	s0,a1
800020a4:	89b6                	mv	s3,a3
800020a6:	04358693          	addi	a3,a1,67
800020aa:	0185c583          	lbu	a1,24(a1)
800020ae:	07800793          	li	a5,120
800020b2:	84aa                	mv	s1,a0
800020b4:	8932                	mv	s2,a2
800020b6:	00b7ec63          	bltu	a5,a1,800020ce <_printf_i+0x3e>
800020ba:	06200793          	li	a5,98
800020be:	00b7ed63          	bltu	a5,a1,800020d8 <_printf_i+0x48>
800020c2:	1c058663          	beqz	a1,8000228e <_printf_i+0x1fe>
800020c6:	05800793          	li	a5,88
800020ca:	12f58b63          	beq	a1,a5,80002200 <_printf_i+0x170>
800020ce:	04240a93          	addi	s5,s0,66
800020d2:	04b40123          	sb	a1,66(s0)
800020d6:	a815                	j	8000210a <_printf_i+0x7a>
800020d8:	f9d58793          	addi	a5,a1,-99
800020dc:	0ff7f793          	andi	a5,a5,255
800020e0:	4655                	li	a2,21
800020e2:	fef666e3          	bltu	a2,a5,800020ce <_printf_i+0x3e>
800020e6:	00000617          	auipc	a2,0x0
800020ea:	62660613          	addi	a2,a2,1574 # 8000270c <__sf_fake_stdout+0x5c>
800020ee:	078a                	slli	a5,a5,0x2
800020f0:	97b2                	add	a5,a5,a2
800020f2:	439c                	lw	a5,0(a5)
800020f4:	97b2                	add	a5,a5,a2
800020f6:	8782                	jr	a5
800020f8:	431c                	lw	a5,0(a4)
800020fa:	04240a93          	addi	s5,s0,66
800020fe:	00478693          	addi	a3,a5,4
80002102:	439c                	lw	a5,0(a5)
80002104:	c314                	sw	a3,0(a4)
80002106:	04f40123          	sb	a5,66(s0)
8000210a:	4785                	li	a5,1
8000210c:	a265                	j	800022b4 <_printf_i+0x224>
8000210e:	401c                	lw	a5,0(s0)
80002110:	4308                	lw	a0,0(a4)
80002112:	0807f613          	andi	a2,a5,128
80002116:	00450593          	addi	a1,a0,4
8000211a:	c20d                	beqz	a2,8000213c <_printf_i+0xac>
8000211c:	411c                	lw	a5,0(a0)
8000211e:	c30c                	sw	a1,0(a4)
80002120:	0007d863          	bgez	a5,80002130 <_printf_i+0xa0>
80002124:	02d00713          	li	a4,45
80002128:	40f007b3          	neg	a5,a5
8000212c:	04e401a3          	sb	a4,67(s0)
80002130:	00000617          	auipc	a2,0x0
80002134:	5b460613          	addi	a2,a2,1460 # 800026e4 <__sf_fake_stdout+0x34>
80002138:	4729                	li	a4,10
8000213a:	a0a9                	j	80002184 <_printf_i+0xf4>
8000213c:	0407f613          	andi	a2,a5,64
80002140:	411c                	lw	a5,0(a0)
80002142:	c30c                	sw	a1,0(a4)
80002144:	de71                	beqz	a2,80002120 <_printf_i+0x90>
80002146:	07c2                	slli	a5,a5,0x10
80002148:	87c1                	srai	a5,a5,0x10
8000214a:	bfd9                	j	80002120 <_printf_i+0x90>
8000214c:	4010                	lw	a2,0(s0)
8000214e:	431c                	lw	a5,0(a4)
80002150:	08067813          	andi	a6,a2,128
80002154:	00478513          	addi	a0,a5,4
80002158:	00080563          	beqz	a6,80002162 <_printf_i+0xd2>
8000215c:	c308                	sw	a0,0(a4)
8000215e:	439c                	lw	a5,0(a5)
80002160:	a039                	j	8000216e <_printf_i+0xde>
80002162:	04067613          	andi	a2,a2,64
80002166:	c308                	sw	a0,0(a4)
80002168:	da7d                	beqz	a2,8000215e <_printf_i+0xce>
8000216a:	0007d783          	lhu	a5,0(a5)
8000216e:	06f00713          	li	a4,111
80002172:	00000617          	auipc	a2,0x0
80002176:	57260613          	addi	a2,a2,1394 # 800026e4 <__sf_fake_stdout+0x34>
8000217a:	0ee58463          	beq	a1,a4,80002262 <_printf_i+0x1d2>
8000217e:	4729                	li	a4,10
80002180:	040401a3          	sb	zero,67(s0)
80002184:	404c                	lw	a1,4(s0)
80002186:	c40c                	sw	a1,8(s0)
80002188:	0005c563          	bltz	a1,80002192 <_printf_i+0x102>
8000218c:	4008                	lw	a0,0(s0)
8000218e:	996d                	andi	a0,a0,-5
80002190:	c008                	sw	a0,0(s0)
80002192:	e399                	bnez	a5,80002198 <_printf_i+0x108>
80002194:	8ab6                	mv	s5,a3
80002196:	cd99                	beqz	a1,800021b4 <_printf_i+0x124>
80002198:	8ab6                	mv	s5,a3
8000219a:	02e7f5b3          	remu	a1,a5,a4
8000219e:	1afd                	addi	s5,s5,-1
800021a0:	95b2                	add	a1,a1,a2
800021a2:	0005c583          	lbu	a1,0(a1)
800021a6:	00ba8023          	sb	a1,0(s5)
800021aa:	85be                	mv	a1,a5
800021ac:	02e7d7b3          	divu	a5,a5,a4
800021b0:	fee5f5e3          	bgeu	a1,a4,8000219a <_printf_i+0x10a>
800021b4:	47a1                	li	a5,8
800021b6:	00f71e63          	bne	a4,a5,800021d2 <_printf_i+0x142>
800021ba:	401c                	lw	a5,0(s0)
800021bc:	8b85                	andi	a5,a5,1
800021be:	cb91                	beqz	a5,800021d2 <_printf_i+0x142>
800021c0:	4058                	lw	a4,4(s0)
800021c2:	481c                	lw	a5,16(s0)
800021c4:	00e7c763          	blt	a5,a4,800021d2 <_printf_i+0x142>
800021c8:	03000793          	li	a5,48
800021cc:	fefa8fa3          	sb	a5,-1(s5)
800021d0:	1afd                	addi	s5,s5,-1
800021d2:	415686b3          	sub	a3,a3,s5
800021d6:	c814                	sw	a3,16(s0)
800021d8:	874e                	mv	a4,s3
800021da:	86ca                	mv	a3,s2
800021dc:	0070                	addi	a2,sp,12
800021de:	85a2                	mv	a1,s0
800021e0:	8526                	mv	a0,s1
800021e2:	334d                	jal	80001f84 <_printf_common>
800021e4:	5a7d                	li	s4,-1
800021e6:	0d451b63          	bne	a0,s4,800022bc <_printf_i+0x22c>
800021ea:	557d                	li	a0,-1
800021ec:	50b2                	lw	ra,44(sp)
800021ee:	5422                	lw	s0,40(sp)
800021f0:	5492                	lw	s1,36(sp)
800021f2:	5902                	lw	s2,32(sp)
800021f4:	49f2                	lw	s3,28(sp)
800021f6:	4a62                	lw	s4,24(sp)
800021f8:	4ad2                	lw	s5,20(sp)
800021fa:	4b42                	lw	s6,16(sp)
800021fc:	6145                	addi	sp,sp,48
800021fe:	8082                	ret
80002200:	04b402a3          	sb	a1,69(s0)
80002204:	00000617          	auipc	a2,0x0
80002208:	4e060613          	addi	a2,a2,1248 # 800026e4 <__sf_fake_stdout+0x34>
8000220c:	400c                	lw	a1,0(s0)
8000220e:	4308                	lw	a0,0(a4)
80002210:	0805f813          	andi	a6,a1,128
80002214:	411c                	lw	a5,0(a0)
80002216:	0511                	addi	a0,a0,4
80002218:	02080d63          	beqz	a6,80002252 <_printf_i+0x1c2>
8000221c:	c308                	sw	a0,0(a4)
8000221e:	0015f713          	andi	a4,a1,1
80002222:	c701                	beqz	a4,8000222a <_printf_i+0x19a>
80002224:	0205e593          	ori	a1,a1,32
80002228:	c00c                	sw	a1,0(s0)
8000222a:	4741                	li	a4,16
8000222c:	fbb1                	bnez	a5,80002180 <_printf_i+0xf0>
8000222e:	400c                	lw	a1,0(s0)
80002230:	fdf5f593          	andi	a1,a1,-33
80002234:	c00c                	sw	a1,0(s0)
80002236:	b7a9                	j	80002180 <_printf_i+0xf0>
80002238:	401c                	lw	a5,0(s0)
8000223a:	0207e793          	ori	a5,a5,32
8000223e:	c01c                	sw	a5,0(s0)
80002240:	07800793          	li	a5,120
80002244:	04f402a3          	sb	a5,69(s0)
80002248:	00000617          	auipc	a2,0x0
8000224c:	4b060613          	addi	a2,a2,1200 # 800026f8 <__sf_fake_stdout+0x48>
80002250:	bf75                	j	8000220c <_printf_i+0x17c>
80002252:	0405f813          	andi	a6,a1,64
80002256:	c308                	sw	a0,0(a4)
80002258:	fc0803e3          	beqz	a6,8000221e <_printf_i+0x18e>
8000225c:	07c2                	slli	a5,a5,0x10
8000225e:	83c1                	srli	a5,a5,0x10
80002260:	bf7d                	j	8000221e <_printf_i+0x18e>
80002262:	4721                	li	a4,8
80002264:	bf31                	j	80002180 <_printf_i+0xf0>
80002266:	4010                	lw	a2,0(s0)
80002268:	431c                	lw	a5,0(a4)
8000226a:	484c                	lw	a1,20(s0)
8000226c:	08067813          	andi	a6,a2,128
80002270:	00478513          	addi	a0,a5,4
80002274:	00080663          	beqz	a6,80002280 <_printf_i+0x1f0>
80002278:	c308                	sw	a0,0(a4)
8000227a:	439c                	lw	a5,0(a5)
8000227c:	c38c                	sw	a1,0(a5)
8000227e:	a801                	j	8000228e <_printf_i+0x1fe>
80002280:	c308                	sw	a0,0(a4)
80002282:	04067613          	andi	a2,a2,64
80002286:	439c                	lw	a5,0(a5)
80002288:	da75                	beqz	a2,8000227c <_printf_i+0x1ec>
8000228a:	00b79023          	sh	a1,0(a5)
8000228e:	00042823          	sw	zero,16(s0)
80002292:	8ab6                	mv	s5,a3
80002294:	b791                	j	800021d8 <_printf_i+0x148>
80002296:	431c                	lw	a5,0(a4)
80002298:	4050                	lw	a2,4(s0)
8000229a:	4581                	li	a1,0
8000229c:	00478693          	addi	a3,a5,4
800022a0:	c314                	sw	a3,0(a4)
800022a2:	0007aa83          	lw	s5,0(a5)
800022a6:	8556                	mv	a0,s5
800022a8:	2439                	jal	800024b6 <memchr>
800022aa:	c501                	beqz	a0,800022b2 <_printf_i+0x222>
800022ac:	41550533          	sub	a0,a0,s5
800022b0:	c048                	sw	a0,4(s0)
800022b2:	405c                	lw	a5,4(s0)
800022b4:	c81c                	sw	a5,16(s0)
800022b6:	040401a3          	sb	zero,67(s0)
800022ba:	bf39                	j	800021d8 <_printf_i+0x148>
800022bc:	4814                	lw	a3,16(s0)
800022be:	8656                	mv	a2,s5
800022c0:	85ca                	mv	a1,s2
800022c2:	8526                	mv	a0,s1
800022c4:	9982                	jalr	s3
800022c6:	f34502e3          	beq	a0,s4,800021ea <_printf_i+0x15a>
800022ca:	401c                	lw	a5,0(s0)
800022cc:	8b89                	andi	a5,a5,2
800022ce:	e78d                	bnez	a5,800022f8 <_printf_i+0x268>
800022d0:	47b2                	lw	a5,12(sp)
800022d2:	4448                	lw	a0,12(s0)
800022d4:	f0f55ce3          	bge	a0,a5,800021ec <_printf_i+0x15c>
800022d8:	853e                	mv	a0,a5
800022da:	bf09                	j	800021ec <_printf_i+0x15c>
800022dc:	4685                	li	a3,1
800022de:	8656                	mv	a2,s5
800022e0:	85ca                	mv	a1,s2
800022e2:	8526                	mv	a0,s1
800022e4:	9982                	jalr	s3
800022e6:	f16502e3          	beq	a0,s6,800021ea <_printf_i+0x15a>
800022ea:	0a05                	addi	s4,s4,1
800022ec:	445c                	lw	a5,12(s0)
800022ee:	4732                	lw	a4,12(sp)
800022f0:	8f99                	sub	a5,a5,a4
800022f2:	fefa45e3          	blt	s4,a5,800022dc <_printf_i+0x24c>
800022f6:	bfe9                	j	800022d0 <_printf_i+0x240>
800022f8:	4a01                	li	s4,0
800022fa:	01940a93          	addi	s5,s0,25
800022fe:	5b7d                	li	s6,-1
80002300:	b7f5                	j	800022ec <_printf_i+0x25c>

80002302 <_sbrk_r>:
80002302:	1141                	addi	sp,sp,-16
80002304:	c422                	sw	s0,8(sp)
80002306:	842a                	mv	s0,a0
80002308:	852e                	mv	a0,a1
8000230a:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
8000230e:	c606                	sw	ra,12(sp)
80002310:	a58fe0ef          	jal	ra,80000568 <_sbrk>
80002314:	57fd                	li	a5,-1
80002316:	00f51663          	bne	a0,a5,80002322 <_sbrk_r+0x20>
8000231a:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
8000231e:	c391                	beqz	a5,80002322 <_sbrk_r+0x20>
80002320:	c01c                	sw	a5,0(s0)
80002322:	40b2                	lw	ra,12(sp)
80002324:	4422                	lw	s0,8(sp)
80002326:	0141                	addi	sp,sp,16
80002328:	8082                	ret

8000232a <__sread>:
8000232a:	1141                	addi	sp,sp,-16
8000232c:	c422                	sw	s0,8(sp)
8000232e:	842e                	mv	s0,a1
80002330:	00e59583          	lh	a1,14(a1)
80002334:	c606                	sw	ra,12(sp)
80002336:	2a79                	jal	800024d4 <_read_r>
80002338:	00054963          	bltz	a0,8000234a <__sread+0x20>
8000233c:	487c                	lw	a5,84(s0)
8000233e:	97aa                	add	a5,a5,a0
80002340:	c87c                	sw	a5,84(s0)
80002342:	40b2                	lw	ra,12(sp)
80002344:	4422                	lw	s0,8(sp)
80002346:	0141                	addi	sp,sp,16
80002348:	8082                	ret
8000234a:	00c45783          	lhu	a5,12(s0)
8000234e:	777d                	lui	a4,0xfffff
80002350:	177d                	addi	a4,a4,-1
80002352:	8ff9                	and	a5,a5,a4
80002354:	00f41623          	sh	a5,12(s0)
80002358:	b7ed                	j	80002342 <__sread+0x18>

8000235a <__swrite>:
8000235a:	00c5d783          	lhu	a5,12(a1)
8000235e:	1101                	addi	sp,sp,-32
80002360:	cc22                	sw	s0,24(sp)
80002362:	ca26                	sw	s1,20(sp)
80002364:	c84a                	sw	s2,16(sp)
80002366:	c64e                	sw	s3,12(sp)
80002368:	ce06                	sw	ra,28(sp)
8000236a:	1007f793          	andi	a5,a5,256
8000236e:	84aa                	mv	s1,a0
80002370:	842e                	mv	s0,a1
80002372:	8932                	mv	s2,a2
80002374:	89b6                	mv	s3,a3
80002376:	c791                	beqz	a5,80002382 <__swrite+0x28>
80002378:	00e59583          	lh	a1,14(a1)
8000237c:	4689                	li	a3,2
8000237e:	4601                	li	a2,0
80002380:	2229                	jal	8000248a <_lseek_r>
80002382:	00c45783          	lhu	a5,12(s0)
80002386:	777d                	lui	a4,0xfffff
80002388:	177d                	addi	a4,a4,-1
8000238a:	8ff9                	and	a5,a5,a4
8000238c:	00e41583          	lh	a1,14(s0)
80002390:	00f41623          	sh	a5,12(s0)
80002394:	4462                	lw	s0,24(sp)
80002396:	40f2                	lw	ra,28(sp)
80002398:	86ce                	mv	a3,s3
8000239a:	864a                	mv	a2,s2
8000239c:	49b2                	lw	s3,12(sp)
8000239e:	4942                	lw	s2,16(sp)
800023a0:	8526                	mv	a0,s1
800023a2:	44d2                	lw	s1,20(sp)
800023a4:	6105                	addi	sp,sp,32
800023a6:	a83d                	j	800023e4 <_write_r>

800023a8 <__sseek>:
800023a8:	1141                	addi	sp,sp,-16
800023aa:	c422                	sw	s0,8(sp)
800023ac:	842e                	mv	s0,a1
800023ae:	00e59583          	lh	a1,14(a1)
800023b2:	c606                	sw	ra,12(sp)
800023b4:	28d9                	jal	8000248a <_lseek_r>
800023b6:	57fd                	li	a5,-1
800023b8:	00c45703          	lhu	a4,12(s0)
800023bc:	00f51b63          	bne	a0,a5,800023d2 <__sseek+0x2a>
800023c0:	77fd                	lui	a5,0xfffff
800023c2:	17fd                	addi	a5,a5,-1
800023c4:	8ff9                	and	a5,a5,a4
800023c6:	00f41623          	sh	a5,12(s0)
800023ca:	40b2                	lw	ra,12(sp)
800023cc:	4422                	lw	s0,8(sp)
800023ce:	0141                	addi	sp,sp,16
800023d0:	8082                	ret
800023d2:	6785                	lui	a5,0x1
800023d4:	8fd9                	or	a5,a5,a4
800023d6:	00f41623          	sh	a5,12(s0)
800023da:	c868                	sw	a0,84(s0)
800023dc:	b7fd                	j	800023ca <__sseek+0x22>

800023de <__sclose>:
800023de:	00e59583          	lh	a1,14(a1)
800023e2:	a03d                	j	80002410 <_close_r>

800023e4 <_write_r>:
800023e4:	1141                	addi	sp,sp,-16
800023e6:	c422                	sw	s0,8(sp)
800023e8:	842a                	mv	s0,a0
800023ea:	852e                	mv	a0,a1
800023ec:	85b2                	mv	a1,a2
800023ee:	8636                	mv	a2,a3
800023f0:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
800023f4:	c606                	sw	ra,12(sp)
800023f6:	9eafe0ef          	jal	ra,800005e0 <_write>
800023fa:	57fd                	li	a5,-1
800023fc:	00f51663          	bne	a0,a5,80002408 <_write_r+0x24>
80002400:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
80002404:	c391                	beqz	a5,80002408 <_write_r+0x24>
80002406:	c01c                	sw	a5,0(s0)
80002408:	40b2                	lw	ra,12(sp)
8000240a:	4422                	lw	s0,8(sp)
8000240c:	0141                	addi	sp,sp,16
8000240e:	8082                	ret

80002410 <_close_r>:
80002410:	1141                	addi	sp,sp,-16
80002412:	c422                	sw	s0,8(sp)
80002414:	842a                	mv	s0,a0
80002416:	852e                	mv	a0,a1
80002418:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
8000241c:	c606                	sw	ra,12(sp)
8000241e:	87afe0ef          	jal	ra,80000498 <_close>
80002422:	57fd                	li	a5,-1
80002424:	00f51663          	bne	a0,a5,80002430 <_close_r+0x20>
80002428:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
8000242c:	c391                	beqz	a5,80002430 <_close_r+0x20>
8000242e:	c01c                	sw	a5,0(s0)
80002430:	40b2                	lw	ra,12(sp)
80002432:	4422                	lw	s0,8(sp)
80002434:	0141                	addi	sp,sp,16
80002436:	8082                	ret

80002438 <_fstat_r>:
80002438:	1141                	addi	sp,sp,-16
8000243a:	c422                	sw	s0,8(sp)
8000243c:	842a                	mv	s0,a0
8000243e:	852e                	mv	a0,a1
80002440:	85b2                	mv	a1,a2
80002442:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
80002446:	c606                	sw	ra,12(sp)
80002448:	86cfe0ef          	jal	ra,800004b4 <_fstat>
8000244c:	57fd                	li	a5,-1
8000244e:	00f51663          	bne	a0,a5,8000245a <_fstat_r+0x22>
80002452:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
80002456:	c391                	beqz	a5,8000245a <_fstat_r+0x22>
80002458:	c01c                	sw	a5,0(s0)
8000245a:	40b2                	lw	ra,12(sp)
8000245c:	4422                	lw	s0,8(sp)
8000245e:	0141                	addi	sp,sp,16
80002460:	8082                	ret

80002462 <_isatty_r>:
80002462:	1141                	addi	sp,sp,-16
80002464:	c422                	sw	s0,8(sp)
80002466:	842a                	mv	s0,a0
80002468:	852e                	mv	a0,a1
8000246a:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
8000246e:	c606                	sw	ra,12(sp)
80002470:	884fe0ef          	jal	ra,800004f4 <_isatty>
80002474:	57fd                	li	a5,-1
80002476:	00f51663          	bne	a0,a5,80002482 <_isatty_r+0x20>
8000247a:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
8000247e:	c391                	beqz	a5,80002482 <_isatty_r+0x20>
80002480:	c01c                	sw	a5,0(s0)
80002482:	40b2                	lw	ra,12(sp)
80002484:	4422                	lw	s0,8(sp)
80002486:	0141                	addi	sp,sp,16
80002488:	8082                	ret

8000248a <_lseek_r>:
8000248a:	1141                	addi	sp,sp,-16
8000248c:	c422                	sw	s0,8(sp)
8000248e:	842a                	mv	s0,a0
80002490:	852e                	mv	a0,a1
80002492:	85b2                	mv	a1,a2
80002494:	8636                	mv	a2,a3
80002496:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
8000249a:	c606                	sw	ra,12(sp)
8000249c:	86cfe0ef          	jal	ra,80000508 <_lseek>
800024a0:	57fd                	li	a5,-1
800024a2:	00f51663          	bne	a0,a5,800024ae <_lseek_r+0x24>
800024a6:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
800024aa:	c391                	beqz	a5,800024ae <_lseek_r+0x24>
800024ac:	c01c                	sw	a5,0(s0)
800024ae:	40b2                	lw	ra,12(sp)
800024b0:	4422                	lw	s0,8(sp)
800024b2:	0141                	addi	sp,sp,16
800024b4:	8082                	ret

800024b6 <memchr>:
800024b6:	0ff5f593          	andi	a1,a1,255
800024ba:	962a                	add	a2,a2,a0
800024bc:	00c51463          	bne	a0,a2,800024c4 <memchr+0xe>
800024c0:	4501                	li	a0,0
800024c2:	8082                	ret
800024c4:	00054783          	lbu	a5,0(a0)
800024c8:	feb78de3          	beq	a5,a1,800024c2 <memchr+0xc>
800024cc:	0505                	addi	a0,a0,1
800024ce:	b7fd                	j	800024bc <memchr+0x6>

800024d0 <__malloc_lock>:
800024d0:	8082                	ret

800024d2 <__malloc_unlock>:
800024d2:	8082                	ret

800024d4 <_read_r>:
800024d4:	1141                	addi	sp,sp,-16
800024d6:	c422                	sw	s0,8(sp)
800024d8:	842a                	mv	s0,a0
800024da:	852e                	mv	a0,a1
800024dc:	85b2                	mv	a1,a2
800024de:	8636                	mv	a2,a3
800024e0:	8e01ae23          	sw	zero,-1796(gp) # 9000015c <errno>
800024e4:	c606                	sw	ra,12(sp)
800024e6:	83efe0ef          	jal	ra,80000524 <_read>
800024ea:	57fd                	li	a5,-1
800024ec:	00f51663          	bne	a0,a5,800024f8 <_read_r+0x24>
800024f0:	8fc1a783          	lw	a5,-1796(gp) # 9000015c <errno>
800024f4:	c391                	beqz	a5,800024f8 <_read_r+0x24>
800024f6:	c01c                	sw	a5,0(s0)
800024f8:	40b2                	lw	ra,12(sp)
800024fa:	4422                	lw	s0,8(sp)
800024fc:	0141                	addi	sp,sp,16
800024fe:	8082                	ret
